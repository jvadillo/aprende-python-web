{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aprende Python desde cero a experto","text":"<p>  </p> <p>\u00a1Bienvenido! Este es un curso grauito para aprender Python desde cero, pensado tanto para gente sin ninguna experiencia como para aquellos que ya dominan otros lenguajes de programaci\u00f3n. Ha sido escrito para aprender Python de forma \u00e1gil y eficiente, centr\u00e1ndose en los aspectos m\u00e1s \u00fatiles del lenguaje (sin perder el tiempo es cosas que nunca utilizar\u00e1s). Mediante peque\u00f1as pr\u00e1cticas y ejemplos ir\u00e1s aprendiendo los fundamentos b\u00e1sicos de Python hasta llegar a ser un experto en el lenguaje.</p> <p>Puedes tambi\u00e9n descargar libro aqu\u00ed</p>"},{"location":"#conocimientos-previos","title":"Conocimientos previos","text":"<p>El curso no requiere conocimientos previos de ning\u00fan tipo ni experiencia en programaci\u00f3n, pero en caso de tenerla podr\u00e1s fortalecer los conocimientos que tienen en com\u00fan los distintos lenguajes de programaci\u00f3n y avanzar m\u00e1s r\u00e1pido. No te preocupes si es la primera vez que te enfrentas a la programaci\u00f3n, el libro est\u00e1 pensado para acompa\u00f1arte paso a paso y de forma \u00e1gil, sin perder el tiempo aprendiendo aspectos irrelevantes del lenguaje.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>El curso comenzar\u00e1 tratando los fundamentos m\u00e1s b\u00e1sicos de Python, adentr\u00e1ndose paso a paso en aspectos m\u00e1s complejos y fascinantes del lenguaje. A continuaci\u00f3n tienes el \u00edndice de contenidos, pero te aviso de que el material est\u00e1 en constante mejora y evoluci\u00f3n.</p> <ol> <li>Introducci\u00f3n </li> <li>Variables y Tipos de datos </li> <li>Operadores y expresiones</li> <li>Estructuras de control</li> <li>Listas y Tuplas</li> <li>Diccionarios</li> <li>Funciones</li> <li>Excepciones</li> <li>Clases y Objetos</li> <li>Herencia</li> <li>M\u00f3dulos y Paquetes</li> <li>Pr\u00f3ximos pasos</li> </ol>"},{"location":"#contribuir","title":"Contribuir","text":"<p>Toda contribuci\u00f3n es m\u00e1s que bienvenida. Puedes contribuir con este libro de las siguientes: - Ayuda a mejorar el material notificando errores, planteando mejoras o incluso nuevos ejercicios pr\u00e1cticos. Puedes hacerlo respondiendo a este issue directamente o envi\u00e1ndome un mensaje en Twitter (@JonVadillo). - Comparte y recomienda este libro o el repositorio en las redes sociales. - Recuerda que puedes adquirir este libro por el precio que consideres (\u00a1desde cero euros!)</p>"},{"location":"#licencia","title":"Licencia","text":"<p>Este libro esta licenciado como Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License aunque no necesariamente las im\u00e1genes de su interior.</p> <p>El c\u00f3digo que contiene este repositorio se encuenta bajo la licencia GNU GPL-3.0</p>"},{"location":"01-introduccion/","title":"Introducci\u00f3n","text":"<p>Python es sin duda alguna uno de los lenguajes de programaci\u00f3n m\u00e1s populares que existen hoy en d\u00eda. En comparaci\u00f3n con otros lenguajes de programaci\u00f3n, Python presume de tener una curva de aprendizaje peque\u00f1a y un gran potencial, ya que hablamos de un lenguaje con el que es posible realizar tareas de todo tipo, como por ejemplo:</p> <ul> <li>Desarrollo de aplicaciones web</li> <li>Inteligencia artificial</li> <li>Automatizaci\u00f3n de tareas</li> <li>An\u00e1lisis avanzado de datos</li> </ul> <p>En este libro aprender\u00e1s los fundamentos b\u00e1sicos del lenguaje de forma que al terminar su lectura cuentes con una s\u00f3lida base sobre la que seguir tu carrera como programador.</p>"},{"location":"01-introduccion/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<p>Se trata de un lenguaje open source en el que destaca su legibilidad. El c\u00f3digo es limpio y ordenado, lo cual convierte a Python en un lenguaje c\u00f3modo de leer y escribir. En definitiva: un lenguaje de programaci\u00f3n f\u00e1cil de entender y aprender. </p> <p>Al contrario que otros lenguajes de programaci\u00f3n como C o Java, Python es un lenguaje interpretado, lo que significa que no es necesario compilar el c\u00f3digo de Python antes de ejecutarlo. El int\u00e9rprete ir\u00e1 analizando y ejecutando el c\u00f3digo l\u00ednea por l\u00ednea. </p> <p>Otra de las principales caracter\u00edsticas de Python es que es que es un lenguaje de programaci\u00f3n din\u00e1micamente tipado, es decir, el programador no tiene que declarar el tipo de las variables si no que este se deduce autom\u00e1ticamente en el tiempo de ejecuci\u00f3n.</p> <pre><code># La variable \"edad\" guarda el valor como integer\nedad = 25\nprint(\"La variable 'edad' es de tipo: \" + str(type(edad)))\n# Ahora \"edad\" guarda un string\nedad = \"Tengo 25 a\u00f1os\"\nprint(\"La variable 'edad' es de tipo: \" + str(type(edad)))\n</code></pre> <p>Por \u00faltimo, comentar que una de las mayores ventajas de este lenguaje de programaci\u00f3n orientado a objetos es la extensa variedad de liber\u00edas y frameworks disponibles para cualquier prop\u00f3sito, lo cual hace que Python sea la opci\u00f3n perfecta para el desarrollo de aplicaciones de cualquier tipo.</p>"},{"location":"01-introduccion/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>Python es un lenguaje multiplataforma, lo que significa que podemos trabajar con Python tanto en Windows, Mac o Linux. A pesar de que todav\u00eda encontrar\u00e1s c\u00f3digo escrito en Python 2, en la actualidad la versi\u00f3n recomendada es Python 3. A continuaci\u00f3n podr\u00e1s ver c\u00f3mo instalar Python en cada uno de los entornos.</p>"},{"location":"01-introduccion/#instalar-python-en-windows","title":"Instalar Python en Windows","text":"<p>Sigue los siguientes pasos para instalar Python en Windows:</p> <ol> <li>Descarga la \u00faltima versi\u00f3n de Python para Windows desde la p\u00e1gina web oficial: https://www.python.org/downloads/windows/</li> <li>En funci\u00f3n de la versi\u00f3n de tu sistema operativo (32 btis o 64 bits), tendr\u00e1s que escoger entre una de las dos versiones: Windows x86 executable installer o Windows x86-64 executable installer.</li> <li>Una vez descargado, ejecuta el instalador marcando las casillas \"Add Python 3.6 to PATH\" y \"Add Python to your environment variables\".</li> </ol>"},{"location":"01-introduccion/#instalar-python-en-ubuntu","title":"Instalar Python en Ubuntu","text":"<p>En primer lugar comprueba que Python no est\u00e9 instalado en el sistema mediante el siguiente comando: <pre><code>$ python3 --version\nPython 3.6.1\n</code></pre> En caso de no estar instalado, basta con ejecutar el siguiente comando en la consola: <pre><code>$ sudo apt install python3\n</code></pre></p>"},{"location":"01-introduccion/#instalar-python-en-mac","title":"Instalar Python en Mac","text":"<p>La instalaci\u00f3n para Mac es sencilla y directa. Simplemente descarga la \u00faltima versi\u00f3n de Python desde la p\u00e1gina web oficial y ejecuta el archivo .pkg descargado.</p>"},{"location":"01-introduccion/#entorno-de-desarrollo","title":"Entorno de desarrollo","text":""},{"location":"01-introduccion/#editores-de-codigo","title":"Editores de c\u00f3digo","text":"<p>Para programar en Python es suficiente con tener un editor de texto cualquiera, aunque hoy en d\u00eda es recomendable utilizar un editor avanzado o un IDE que permita programar de forma \u00e1gil. </p> <p>Estas son algunas de las opciones m\u00e1s recomendadas:</p>"},{"location":"01-introduccion/#editores-de-texto","title":"Editores de texto","text":"<ul> <li>Atom: https://atom.io/ </li> <li>Sublime Text: https://www.sublimetext.com/3</li> <li>Visual Studio Code: https://code.visualstudio.com/ </li> </ul>"},{"location":"01-introduccion/#ides","title":"IDEs","text":"<ul> <li>PyCharm: https://www.jetbrains.com/pycharm/ </li> <li>Eclipse (con el plug-in Pydev): https://www.eclipse.org/;[https://www.pydev.org/] (https://www.pydev.org/)</li> </ul>"},{"location":"01-introduccion/#entorno-de-desarrollo-avanzado","title":"Entorno de desarrollo avanzado","text":"<p>M\u00e1s adelante, una vez conozcas los fundamentos del lenguaje y tengas fluidez a la hora de programar, te recomendamos profundizar en los conocidos como \"entornos Virtuales\". Los entornos virtuales permiten configurar tu entorno de desarrollo de forma m\u00e1s avanzada, creando ambientes (entornos) aislados que permitan trabajar con distintas versiones de frameworks y librer\u00edas. Mientras tanto, te recomiendo que contin\u00faes paso a paso y en orden por el resto de lecciones.</p>"},{"location":"01-introduccion/#tu-primer-programa-hola-mundo","title":"Tu primer programa: \u00a1Hola Mundo!","text":"<p>Ya tenemos Python instalado en nuestro sistema operativo, por lo que estamos preparados para comenzar a escribir y ejecutar c\u00f3digo Python. Veremos c\u00f3mo ejecutar c\u00f3digo Python desde la consola directamente o desde un archivo de extensi\u00f3n <code>.py</code> </p>"},{"location":"01-introduccion/#consola-de-python","title":"Consola de Python","text":"<p>La consola de Python nos permite ejecutar c\u00f3digo escrito en Python directamente, sin tener que escribir el c\u00f3digo previamente en ning\u00fan fichero. Para entrar en la consola de Python, abre una consola (tambi\u00e9n conocidda como terminal o shell) del sistema operativo en el que te encuentres y escribe <code>py</code> o <code>python</code>. Esto nos mostrar\u00e1 la versi\u00f3n de Python instalada y dar\u00e1 comienzo a la consola de Python:</p> <pre><code>python\nPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>Ver\u00e1s c\u00f3mo el cursor cambia y ahora aparece el s\u00edmbolo <code>&gt;&gt;&gt;</code>. A partir de ahora ya podemos ir ejecutando las instrucciones que queramos. En este caso escribiremos nuestro primer programa, el ya por todos conocido \u00a1Hola Mundo!:</p> <pre><code>&gt;&gt;&gt; print(\"\u00a1Hola Mundo!\")\n\u00a1Hola Mundo!\n</code></pre> <p>Tambi\u00e9n puedes ejecutar otras instrucciones. Prueba a ejecutar la siguiente operaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; 3*3\n9\n</code></pre> <p>Para salir de la consola de Python, escribe <code>exit()</code> o pulsa <code>CTRL + Z</code> y <code>ENTER</code>.</p>"},{"location":"01-introduccion/#ejecutar-fichero","title":"Ejecutar fichero","text":"<p>Tambi\u00e9n podemos escribir nuestro c\u00f3digo en un fichero con extensi\u00f3n <code>.py</code> y ejecutarlo. Abre un editor de texto y crea un fichero llamado <code>holamundo.py</code> con el siguiente contenido:</p> <pre><code>print(\"\u00a1Hola Mundo!\")\n</code></pre> <p>Para ejecutar el archivo, abre una consola de comandos en la misma ubicaci\u00f3n donde has guardado el archivo y escribe <code>python</code>seguido del nombre del fichero:</p> <pre><code>    python holamundo.py\n</code></pre> <p>\u00a1Enhorabuena! Ya has escrito y ejecutado tu primer programa en Python.</p>"},{"location":"01-introduccion/#sintaxis","title":"Sintaxis","text":""},{"location":"01-introduccion/#indentacion","title":"Indentaci\u00f3n","text":"<p>Un aspecto muy importante a mencionar antes de comenzar a programar en Python es el hecho de que Python utiliza la indentaci\u00f3n (tambi\u00e9n conocida como sangr\u00eda, tabulaci\u00f3n o espaciado) para delimitar los bloques de c\u00f3digo. La indentaci\u00f3n est\u00e1ndar de Python requiere una tabulaci\u00f3n de 4 espacios:</p> <pre><code>x = 5\nif x == 5:\n    # tabulaci\u00f3n de 4 espacios\n    print(\"El valor de x es 5.\")\n</code></pre> <p>En caso contrario, al ejecutar nuestro c\u00f3digo recibiremos un error como el siguiente</p> <pre><code>    IndentationError: unindent does not match any outer indentation level\n</code></pre>"},{"location":"01-introduccion/#comentarios","title":"Comentarios","text":"<p>A la hora de programar es posible que queramos introducir en el c\u00f3digo comentarios que a\u00f1adan informaci\u00f3n extra sin afectar a la ejecuci\u00f3n del programa. En Python los comentarios se insertan mediante el car\u00e1cter hash (<code>#</code>):</p> <pre><code># Mi primer comentario\nx = 5 # Un comentario junto con el c\u00f3digo\n</code></pre>"},{"location":"01-introduccion/#funcionamiento-de-python","title":"Funcionamiento de Python","text":"<p>Python ejecuta nuestro c\u00f3digo l\u00ednea por l\u00ednea. Por cada l\u00ednea de c\u00f3digo estas son las acciones que se realizan: </p> <ol> <li>Analizar (parse en ingl\u00e9s) el c\u00f3digo comprobando que formato y la sintaxis es correcta, es decir, que cumplen las normas establecidas para el lenguaje de progamaci\u00f3n.</li> <li>Traducir el c\u00f3digo a bytecode (instrucciones que nuestra m\u00e1quina puede ejecutar).</li> <li>Enviar el c\u00f3digo para su ejecuci\u00f3n a la Python Virtual Machine(PVM), donde el c\u00f3digo es ejecutado.</li> </ol>"},{"location":"02-Tipos-de-datos-y-Variables/","title":"Variables y Tipos de datos","text":"<p>Las variables permiten almacenar datos del programa. Estas ser\u00e1n de un tipo u otro en funci\u00f3n de la informaci\u00f3n que se guarde en ellas.</p> <p><pre><code>nombre = 'Amaia' # cadena de texto\nedad = 30 # n\u00famero entero\n</code></pre> El nombre de una variable se conoce como identificador, y deber\u00e1 cumplir las siguientes reglas:</p> <ul> <li>Comenzar con una letra o un gui\u00f3n bajo.</li> <li>El resto del nombre estar\u00e1 formado por letras, n\u00fameros o guiones bajos.</li> <li>Los nombres de las variables son case sensitive, es decir, no es lo mismo que una variable se llame <code>resultado</code> que <code>RESULTADO</code>.</li> <li>Existen una serie de palabras reservadas que no se pueden utilizar (def, global, return, if, for, ...).</li> </ul> <p>Algunas de las recomendaciones respecto a los nombres de las variables est\u00e1n recogidas en la Gu\u00eda oficial de Estilos PEP8 de Python. Entre las m\u00e1s habituales encontramos las siguientes:</p> <ul> <li>Utilizar nombres descriptivos, en min\u00fasculas y separados por guiones bajos si fuese necesario: <code>resultado</code>, <code>mi_variable</code>, <code>valor_anterior</code>,...</li> <li>Escribir las constantes en may\u00fasculas: <code>MI_CONSTANTE</code>, <code>NUMERO_PI</code>, ...</li> <li>Antes y despu\u00e9s del signo <code>=</code>, debe haber uno (y solo un) espacio en blanco.</li> </ul> <p>Nota: No olvides que lo que la gu\u00eda plantea son recomendaciones y no obligaciones. Por ejemplo, mientras PEP8 recomienda tabular el c\u00f3digo con 4 espacioes en blanco, la gu\u00eda particular de los desarrolladores de Google habla de 2 espacios en lugar de 4.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#resumen-de-tipos-de-variables","title":"Resumen de tipos de variables","text":"<pre><code>edad = 24 # n\u00famero entero (integer)\nprecio = 112.9 # n\u00famero de punto flotante (float)\ntitulo = \u2018Aprende Python desde cero\u2019 # cadena de texto (string)\ntest = True # booleano\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#lectura-de-datos-en-python","title":"Lectura de datos en Python","text":"<p>La funci\u00f3n <code>input()</code> permite introducir datos al usuario:</p> <pre><code>&gt;&gt;&gt; nombre = input()\nLeire\n&gt;&gt;&gt; print(nombre)\nLeire\n</code></pre> <p>Como se puede ver en el siguiente ejemplo, es posible tambi\u00e9n mostrar un mensaje al usuario, tal y como muestra el siguiente ejemplo.</p> <pre><code>&gt;&gt;&gt; nombre = input(\"Escribe tu nombre: \")\nEscribe tu nombre: Leire\n&gt;&gt;&gt; print(nombre)\nLeire\n ```\n\n## N\u00fameros\nPython soporta dos tipos de n\u00fameros: enteros (integer) y de punto flotante (float).\n\n ```python\n# integer\nx = 5\nprint(x)\n\n# float\ny = 5.0\nprint(y)\n\n# Otra forma de declarar un float\nz = float(5)\nprint(z)\n</code></pre> <p>Si tenemos dudas del valor de una variable, podemos mostrar su tipo utilizando la funci\u00f3n <code>type()</code>:</p> <pre><code>&gt;&gt;&gt; x = 5.5\n&gt;&gt;&gt; type(x)\n&lt;class 'float'&gt;\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#cadenas-de-texto-string","title":"Cadenas de texto (string)","text":"<p>Las cadenas de texto o strings se definen mediante comilla simple (<code>' '</code>) o doble comilla (<code>\" \"</code>):</p> <pre><code>mi_nombre = 'Ane'\nprint(mi_nombre)\nmi_nombre= \"Ane\"\nprint(mi_nombre)\n</code></pre> <p>La diferencia principal se encuentra en que las comillas dobles aportan mayor facilidad en textos que incluyan ap\u00f3strofes:</p> <pre><code>mi_nombre = 'I\\'m John'\nprint(mi_nombre)\nmi_nombre= \"I'm John\"\nprint(mi_nombre)\n</code></pre> <p>M\u00e1s informaci\u00f3n sobre strings y car\u00e1cteres especiales en:  https://docs.python.org/3/tutorial/introduction.html#strings</p> <p>Para definir strings multi-l\u00ednea se utiliza la triples comillas (<code>\"\"\"</code>):</p> <pre><code>frase = \"\"\" esto es una\n        frase muy larga de m\u00e1s de\n        una l\u00ednea ...\"\"\"\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#concatenacion-de-strings","title":"Concatenaci\u00f3n de strings","text":"<p>Es posible unir dos strings con el operador <code>+</code>:</p> <pre><code>&gt;&gt;&gt; primera_palabra = 'Hola'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', mundo'\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n\n&gt;&gt;&gt; segunda_palabra = 'mundo'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', ' + segunda_palabra\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n</code></pre> <p>M\u00e9todo alternativo 1: str.join(): El m\u00e9todo <code>join()</code> recibe como argumento el listado (de tipo List, Tuple, String, Dictionary y Set) de strings que se desean concatenar. Se invoca sobre el separador que se utilizar\u00e1 para unir las cadenas (el cual a su vez es un string tambi\u00e9n):</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; separador = ' - '\n&gt;&gt;&gt; separador.join(strings)\n'do - re - mi'\n</code></pre> <p>Para iterar un elemento detr\u00e1s del otro se introducir\u00e1 string vac\u00edo como separador:</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; ''.join(strings)\n'doremi'\n</code></pre> <p>M\u00e9todo alternativo 2: <code>str.format()</code>: Python 3 introdujo una nueva forma para formatear strings, la cual sustituye a la anterior en la que se hace uso del operador <code>%</code>. Para ello se invoca el m\u00e9todo <code>format()</code> de un string:</p> <pre><code># Ordenado por defecto:\nfrase = \"Meses: {}, {} y {}\".format('Enero','Febrero','Marzo')\nprint(frase)\n\n# Especificar el orden indicando la posici\u00f3n:\nfrase = \"Meses: {1}, {0} y {2}\".format('Enero','Febrero','Marzo')\nprint(frase)\n\n# Especificar el orden mediante parejas clave-valor:\nfrase = \"Meses: {ene}, {feb} y {mar}\".format(ene='Enero', feb='Febrero',m='Marzo')\nprint(frase)\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#cadenas-f-f-strings","title":"Cadenas 'f' (f-strings)","text":"<p>La versi\u00f3n 3.6 de Python trajo un gran avance a la hora de integrar variables o expreiones en cadenas de car\u00e1cteres. Se introdujeron las llamadas <code>f-strings</code>, una forma m\u00e1s c\u00f3moda y directa para insertar variables y expresiones en cadenas. Permiten introducir cualquier variable o expresi\u00f3n dentro de un string incluyendo la variable entre llaves <code>{</code> y <code>}</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>nombre = \"Nora\"\nedad = 22\nsaludo = f\"Me llamo {nombre} y tengo {edad} a\u00f1os.\"\n</code></pre> <p>Para indicar que se trata de un <code>f-string</code>, este deber\u00e1 incluir la letra 'f' antes del comiendo de la cadena (antes de las comillas). A continuaci\u00f3n se muestra otro ejemplo en el que se introduce una expresi\u00f3n:</p> <pre><code>a = 4\nb = 3\nprint(f\"La multiplicaci\u00f3n de {a} y {b} es igual a {a * b}\")\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>A la hora de concatenar un string con otras variables como <code>integer</code> o <code>float</code> puede haber problemas:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + edad + \" a\u00f1os y mi nota media es \" + nota_media + \".\")\n\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>Mediante la funci\u00f3n <code>str()</code> podemos convertir un valor a string y evitar as\u00ed cualquier tipo de problema:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + str(edad) + \" a\u00f1os y mi nota media es \" + str(nota_media) + \".\")\nTengo 25 a\u00f1os y mi nota media es 7.3.\n</code></pre> <p>De igual manera es posible convertir a otros tipos con las funciones <code>int()</code>, <code>float()</code> and <code>bool()</code>.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#metodos-en-cadenas-de-texto-string","title":"M\u00e9todos en cadenas de texto (string)","text":"<p>Es posible obtener un car\u00e1cter concreto de un string utilizando los corchetes <code>[]</code> y el \u00edndice del car\u00e1cter al que queremos acceder:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nfrase[0] # devuelve el primer caracter\nfrase[1] # devuelve el segundo caracter\nfrase[-1] # devuelve el primer caracter empezando por el final\nfrase[-2] # # devuelve el segundo caracter empezando por el final\n</code></pre> <p>Si queremos obtener un substring, utilizaremos la siguiente notaci\u00f3n:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nmi_substring = frase[1:5] \n# devuelver\u00e1 los caracteres desde la posici\u00f3n 1 hasta la 5 (no incluye el 5)\n</code></pre> <p>En caso de dejar la primera variable vac\u00eda, se considera la primera posici\u00f3n del string. Dejando la segunda variable vac\u00eda se considera la \u00faltima posici\u00f3n del string:</p> <pre><code>&gt;&gt;&gt; frase = 'Aprendiendo a programar en Python'\n&gt;&gt;&gt; mi_substring = frase[:5]\n&gt;&gt;&gt; mi_substring\n'Apren'\n&gt;&gt;&gt; mi_substring = frase[4:]\n&gt;&gt;&gt; mi_substring\n'ndiendo a programar en Python'\n</code></pre> <p>Otros m\u00e9todos \u00fatiles de string:</p> <pre><code>len(str) # devuelve la longitud del string\nstr.upper() # convierte a may\u00fasculas\nstr.lower() # convierte a min\u00fasculas\nstr.title() # convierte a may\u00fasculas la primera letra de cada palabra\nstr.count(substring [, inicio, fin]) # devuelve el n\u00famero de veces que aparece\n# el substring en el string. Opcionalmente se puede indicar el inicio y fin. \nstr.find(\u2018d\u2019) # devuelve el \u00edndice de la primera aparici\u00f3n de 'd'\n# (devolver\u00e1 -1 si no lo encuentra)\nsubstr in str # devuelve True si el string contiene el substring\nstr.replace(old, new [, count]) # reemplaza 'old' por 'new' un m\u00e1ximo de 'count' veces.\nstr.isnumeric() # devuelve True si str contiene solamente n\u00fameros\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#coding-time","title":"Coding time!","text":""},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa que contenga las siguientes variables:</p> <ul> <li><code>nombre</code>: tipo string y valor \"Michael Jordan\"</li> <li><code>edad</code>: tipo integer y valor 50</li> <li><code>media_puntos</code>: tipo float y valor 28.5</li> <li><code>activo</code>: False</li> </ul> <p>El programa deber\u00e1 mostrar en pantalla todos los valores.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que solicite el nombre, DNI y edad, lo almacene en 3 variables distintas y muestre por pantalla los valores introducidos.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que genere un string compuesto por los primeros 3 caracteres y los \u00faltimos 3 caracteres de un string introducido por el usuario. Pista: tendr\u00e1s que utilizar la funci\u00f3n <code>len()</code> en la obtenci\u00f3n de los \u00faltimos 3 caracteres.</p> <ul> <li>Ejemplo 1: 'aprendiendo'  </li> <li>Resultado 1: 'aprndo'  </li> <li>Ejemplo 2: 'escribiendo c\u00f3digo'  </li> <li>Resultado 2: 'escigo' </li> </ul>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que solicite al usuario dos n\u00fameros y una frase. El primer n\u00famero introducido se corresponder\u00e1 a la posici\u00f3n de inicio del substring que deber\u00e1 mostrar el programa por pantalla. El segundo n\u00famero indicar\u00e1 la longitud de dicho substring.</p> <ul> <li>Ejemplo 1: Posicion=4, Longitud=8, Frase='Desarrollar es mi nueva afici\u00f3n'  </li> <li>Resultado 1: \"rrollar \"  </li> <li>Ejemplo 2: Posicion=8, Longitud=11, Frase='Bienvenido a la clase de programaci\u00f3n'</li> <li>Resultado 2: \"do a la cla\"</li> </ul>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribe un programa que solicite al usuario una frase. A continuaci\u00f3n le solicitar\u00e1 la letra que quiere reemplazar y por qu\u00e9 letra deber\u00e1 reemplazarse. Por \u00faltimo el programa mostrar\u00e1 el n\u00famero de veces que la letra est\u00e1 presente en la frase y el resultado final tras reemplazarla.</p> <ul> <li>Ejemplo: 'Desarrollar es mi nuevo pasatiempos', 'a','e'</li> <li>Resultado: 4 apariciones. 'Deserroller es mi nueve pesetiempos'  </li> </ul>"},{"location":"03-Operadores-y-expresiones/","title":"Operadores y expresiones","text":"<p>Los operadores son s\u00edmbolos especiales que permiten realizar operaciones aritm\u00e9ticas o l\u00f3gicas.</p>"},{"location":"03-Operadores-y-expresiones/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Los operadores aritm\u00e9ticos se utilizan para realizar operaciones matem\u00e1ticas (suma, resta, multiplicaci\u00f3n,...). La tabla siguiente contiene todos los operadores aritm\u00e9ticos permitidos por Python:</p>    Operador Ejemplo Significado     + a + b Suma   - a - b Resta   - -a Negaci\u00f3n (asignar valor negativo)   * a * b Multiplicaci\u00f3n   / a / b Divisi\u00f3n   % a % b M\u00f3dulo (resto de la divisi\u00f3n)   // a // b Divisi\u00f3n entera   ** a ** b Exponente    <p>Ejemplos:</p> <pre><code>x = 5   \ny = 2\nprint(x + y) # 7\nprint(x - y) # 3\nprint(x * y) # 10\nprint(x / y) # 2.5\n</code></pre>"},{"location":"03-Operadores-y-expresiones/#operadores-relacionales-o-de-comparacion","title":"Operadores relacionales o de comparaci\u00f3n","text":"<p>Los operadores relacionales se utilizan para comparar valores y devuelven como resultado un booleano: <code>True</code> o <code>False</code>.</p>    Operador Ejemplo Significado     &gt; a &gt; b Mayor que: <code>True</code> si a es mayor que b   &lt; a &gt; b Menor que: <code>True</code> si a es menor que b   == a == b Igual: <code>True</code> si a y b son iguales   != a != b Distinto: <code>True</code> si a y b son distintos   &gt;= a &gt;= b Mayor o igual: <code>True</code> si a es igual o mayor que b   &lt;= a &gt;= b Menor o igual: <code>True</code> si a es igual o menor que b"},{"location":"03-Operadores-y-expresiones/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos <code>and</code> <code>or</code>, y <code>not</code> eval\u00faan valores devolviendo tambi\u00e9n <code>True</code>o <code>False</code> como resultado:</p>    Operador Ejemplo Significado     and a and b True si a y b son True   or a or b True si a o b son true   not not b True si b es falso"},{"location":"03-Operadores-y-expresiones/#coding-time","title":"Coding time!","text":""},{"location":"03-Operadores-y-expresiones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que solicite al usuario un n\u00famero del 1 al 10 y muestre por pantalla la tabla de multiplicaci\u00f3n del 1 al 10. Ejemplo: <pre><code>Introduce un n\u00famero del 1 al 10: 3\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n</code></pre></p>"},{"location":"03-Operadores-y-expresiones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que solicite al usuario dos n\u00fameros enteros y muestre por pantalla el resultado de las siguientes operaciones: suma, resta, multiplicaci\u00f3n y divisi\u00f3n. Ejemplo:</p> <pre><code>Introduce el primer n\u00famero: 8\nIntroduce el segundo n\u00famero: 2\nLa suma es: 10\nLa resta es: 6\nLa multiplicaci\u00f3n es: 16\nLa divisi\u00f3n es: 4.0\n</code></pre>"},{"location":"03-Operadores-y-expresiones/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea un programa que solicite al usuario el radio de un c\u00edrculo y calcule el \u00e1rea. Nota: Utiliza 3.14159 como n\u00famero PI para el c\u00e1lculo del \u00e1rea.</p> <p>Ejemplo: <pre><code>Introduce el radio: 3\nEl \u00e1rea es: 28.274309999999996\n</code></pre></p>"},{"location":"04-Estructuras-de-control/","title":"Estructuras de control","text":""},{"location":"04-Estructuras-de-control/#condicionales","title":"Condicionales","text":"<p>Las estructuras de control se utilizan para ejecutar bloques de c\u00f3digo en funci\u00f3n de condiciones.</p>"},{"location":"04-Estructuras-de-control/#sentencia-if-else","title":"Sentencia IF - ELSE","text":"<p>Se eval\u00faa la condici\u00f3n especificada en la sentencia <code>if</code> y en caso de cumplirse se ejecutar\u00e1 el bloque de c\u00f3digo indentado (tabulado). En caso de que el resultado de la condici\u00f3n sea <code>False</code>, el bloque especificado no se ejecutar\u00e1:</p> <pre><code>numero = 5\nif numero &gt; 1:\n    # Se ejecutar\u00e1 cuando la condici\u00f3n sea True\n    print(\"Es mayor que uno\")\n</code></pre> <p>Las condiciones pueden tener mayor complejidad:</p> <pre><code>edad = 16\naltura = 175\nif (edad &gt; 14 and altura &gt; 160):\n    print(\"Puede montarse en la monta\u00f1a rusa\")\n</code></pre> <p>Mediante la palabra reservada <code>else</code> es posible especificar un bloque de c\u00f3digo que se ejecute en caso de que la condici\u00f3n no se cumpla:</p> <pre><code>numero = 2\nif numero &gt; 10:\n     # Se ejecutar\u00e1 cuando la condici\u00f3n sea True\n    print(\"Es mayor que diez\")\nelse:\n    # Se ejecutar\u00e1 cuando la condici\u00f3n sera False\n    print(\"Es menor o igual que diez\")\n</code></pre> <p>Tambi\u00e9n podemos comprobar m\u00e1s condiciones mediante la expresi\u00f3n <code>elif</code>. En este caso, se seguir\u00e1n comprobando todas las condiciones <code>elif</code> hasta que una de ellas se cumpla. En caso contrario, se ejecutar\u00e1 el bloque de c\u00f3digo dentro de <code>else</code> (si lo hubiera).</p> <pre><code>numero = 5\nif numero &lt; 3:\n    print(\"Es menor que 3\")\nelif numero &lt; 6:\n    print(\"El n\u00famero est\u00e1 entre el 3 y el 5\")\nelse:\n    print(\"Es mayor o igual a 6\")\n</code></pre> <p>Tal y como muestra el siguiente c\u00f3digo de ejemplo, Python no tiene limitaciones para anidar distintos bloques de <code>IF</code>s.</p> <pre><code>numero = 2\nif numero &gt;= 0:\n    if numero == 0:\n        print(\"El valor es 0\")\n    else:\n        print(\"Es un n\u00famero positivo\")\nelse:\n    print(\"Es un n\u00famero negativo\")\n</code></pre>"},{"location":"04-Estructuras-de-control/#bucles","title":"Bucles","text":"<p>Los bucles permiten ejecutar un bloque de c\u00f3digo tantas veces como queramos. </p>"},{"location":"04-Estructuras-de-control/#sentencia-while","title":"Sentencia WHILE","text":"<p>La sentencia <code>while</code> permite ejecutar un bloque de c\u00f3digo mientras la expresi\u00f3n que definamos se cumpla (es decir, devuelva <code>True</code>). Python interpretar\u00e1 como <code>True</code> cualquier valor distinto a <code>0</code> o <code>None</code>.</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\n    # Se ejecutar\u00e1 mientras la variable contador sea menor a 5.\n    contador = contador+1\n    print(\"Iteraci\u00f3n n\u00famero\",contador)\nprint (\"\u00a1Fin!\")\n</code></pre> <p>Para detener una ejecuci\u00f3n de forma voluntaria se utiliza la sentencia <code>break</code>:</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\n    contador = contador+1\n    print(\"Iteraci\u00f3n n\u00famero\",contador)\n    if contador == 3:\n        break\nprint (\"\u00a1Fin!\")\n</code></pre> <p>Tambi\u00e9n es posible saltar \u00fanicamente la iteraci\u00f3n actual mediante la sentencia <code>continue</code>:</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\n    contador = contador+1\n    if contador == 3:\n        continue\n    print(\"Iteraci\u00f3n n\u00famero {}\".format(contador))\nprint (\"\u00a1Fin!\")\n</code></pre> <p>La salida del programa anterior ser\u00e1 la siguiente: <pre><code>    Iteraci\u00f3n n\u00famero 1\n    Iteraci\u00f3n n\u00famero 2\n    Iteraci\u00f3n n\u00famero 4\n    Iteraci\u00f3n n\u00famero 5\n    Bucle while finalizado\n</code></pre></p> <p>Otros lenguajes de programaci\u00f3n ofrecen otra estructura similar conocida como <code>DO - WHILE</code>. No es el caso de Python, por lo que habr\u00eda que emular dicho comportamiento mediante nuestro c\u00f3digo.</p>"},{"location":"04-Estructuras-de-control/#bucle-while-con-else","title":"Bucle WHILE con ELSE","text":"<p>La expresi\u00f3n <code>else</code> puede utilizarse tambi\u00e9n tras un bloque <code>while</code>. De este forma podemos definir un bloque de c\u00f3digo que se ejecutar\u00e1 una vez finalizado el bloque <code>while</code> (es decir, cuando la condici\u00f3n se eval\u00fae <code>False</code> y no se haya finalizado mediante un <code>break</code>):</p> <pre><code>count = 0\nwhile(count &lt; 5):\n    count = count+1\n    print(\"Iteraci\u00f3n n\u00famero {}\".format(count))\nelse:\n    print(\"Bucle while finalizado\")\n ```   \n\n### Sentencia FOR\nA diferencia de otros lenguajes de programaci\u00f3n, en Python la sentencia FOR itera \u00fanicamente por secuencias (listas, tuplas, cadenas de caracteres,...).\n\n```python\nalumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\nfor alumno in alumnos:\n    print(alumno)\n</code></pre> <p>Tambi\u00e9n es posible utilizarlo para recorrer un string:</p> <pre><code>frase = \"Aprendiendo Python\"\nfor c in frase:\n    print(c)\n</code></pre> <p>Para detener una ejecuci\u00f3n se utiliza la sentencia <code>break</code>:</p> <pre><code>numeros = [4,8,2,7,1,9,3,5]\ntotal = 0\n\nfor n in numeros:\n    total += n\n    if total &gt; 10\n        break\n</code></pre> <p>Al igual que en otras estructuras de repetici\u00f3n, tambi\u00e9n es posible saltar \u00fanicamente la iteraci\u00f3n actual mediante la sentencia <code>continue</code>:</p> <pre><code>numeros = [4,8,2,7,1,9,3,5]\ntotal = 0\n\n# solo sumar los n\u00fameros impares\nfor num in numeros:\n    if num % 2 == 0:\n        print(\"Numero par, no lo sumamos\")\n        continue\n    total += n\n</code></pre>"},{"location":"04-Estructuras-de-control/#bucle-for-con-else","title":"Bucle FOR con ELSE","text":"<p>Python permite definir un bloque de c\u00f3digo que se ejecutar\u00e1 una vez finalice la iteraci\u00f3n por todos los elementos de una lista. Es importante mencionar que no se ejecutar\u00e1 si se ha finalizado mediante <code>break</code>.</p> <pre><code>alumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\nfor alumno in alumnos:\n    print(alumno)\nelse:\n    print(\"No quedan m\u00e1s alumnos.\")\n</code></pre>"},{"location":"04-Estructuras-de-control/#la-funcion-range","title":"La funci\u00f3n range()","text":"<p>La funci\u00f3n <code>range([start,]  stop  [,  step])</code> devuelve una secuencia de n\u00fameros. Es por ello que se utiliza de forma frecuente para iterar:</p> <pre><code>for i in range(3):\n    print(i)\n# 0\n# 1\n# 2\n</code></pre> <p>Tambi\u00e9n podemos indicar el inicio, fin y step:</p> <pre><code>print(\"N\u00fameros del 5 al 10\") \nfor i in range(5,  10): \n    print(i,  end=', ')\n# 5,  6,  7,  8,  9,\n\nprint(\"N\u00fameros impares del 1 al 10\")\nfor i in range(1,  10,  2):\n    print(i,  end=', ')\n# 1,  3,  5,  7,  9,\n</code></pre> <p>Para iterar por una lista utilizando el \u00edndice, basta con combinarlo con la funci\u00f3n <code>len()</code>:</p> <pre><code>    alumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\n    for i in range(len(alumnos)):\n        print(alumnos[i])\n</code></pre>"},{"location":"04-Estructuras-de-control/#coding-time","title":"Coding time!","text":""},{"location":"04-Estructuras-de-control/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que solicite un n\u00famero al usuario y devuelva el siguiente mensaje:</p> <ul> <li>Si es mayor que 0: \"Es un n\u00famero positivo.\"</li> <li>Si es igual a 0: \"Es igual a cero.</li> <li>Si es menor que 0: \"Es un n\u00famero negativo.\"</li> </ul> <p>Ejemplo 1:</p> <pre><code>Introduce un n\u00famero: 5\nEs un n\u00famero positivo\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce un n\u00famero: -3\nEs un n\u00famero negativo\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que solicite dos n\u00fameros enteros al usuario y muestre por pantalla la suma de todos los n\u00fameros enteros que hay entre los dos n\u00fameros (ambos n\u00fameros incluidos).</p> <p>Ejemplo 1:</p> <pre><code>Introduce el n\u00famero de inicio: 4\nIntroduce el n\u00famero de fin: 8\nEl resultado es:  30\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el n\u00famero de inicio: 10\nIntroduce el n\u00famero de fin: 15\nEl resultado es:  75\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-3","title":"Ejercicio 3","text":"<p>Mejora el programa anterior para que muestre por separado la suma de los n\u00fameros pares y los impares.</p> <p>Ejemplo 1:</p> <pre><code>Introduce el n\u00famero de inicio: 4\nIntroduce el n\u00famero de fin: 8\nLos pares suman 18 y los impares 12\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el n\u00famero de inicio: 10\nIntroduce el n\u00famero de fin: 15\nLos pares suman 36 y los impares 39\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que solicite al usuario un nombre de usuario y contrase\u00f1a. El programa mostrar\u00e1 el mensaje \"\u00a1Bienvenido!\" si el usuario introduce los siguientes datos:</p> <ul> <li>Nombre de usuario: root</li> <li>Contrase\u00f1a: toor</li> </ul> <p>Si los datos de acceso son incorrectos mostrar\u00e1 el mensaje \"Acceso fallido\" y el programa finalizar\u00e1.</p> <p>Ejemplo 1:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: toor\n\u00a1Bienvenido!\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123456\nAcceso fallido\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-5","title":"Ejercicio 5","text":"<p>Mejora el programa anterior para que solo permita 3 intentos. Cada vez vez que el usuario introduzca datos de acceso incorrectos el programa mostrar\u00e1 el mensaje: \"Datos incorrectos. Le quedan X intentos.\", siendo X el n\u00famero de intentos restantes. Tras el tercer fallo el programa mostrar\u00e1 el mensaje \"Has agotado todos tus intentos.\" y finalizar\u00e1.</p> <p>Ejemplo:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123456\nDatos incorrectos. Le quedan 2 intentos.\nIntroduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: abcd\nDatos incorrectos. Le quedan 1 intentos.\nIntroduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123abc\nDatos incorrectos. Le quedan 0 intentos.\n\nHas agotado todos tus intentos.\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-6","title":"Ejercicio 6","text":"<p>Crea un programa que reciba 5 n\u00fameros del usuario y muestre el mayor de todos por pantalla.</p> <p>Ejemplo:</p> <pre><code>Introduce un n\u00famero: 5\nIntroduce un n\u00famero: -10\nIntroduce un n\u00famero: 2\nIntroduce un n\u00famero: 14\nIntroduce un n\u00famero: 7\nEl n\u00famero m\u00e1s alto es:  14\n</code></pre>"},{"location":"04-Estructuras-de-control/#ejercicio-7","title":"Ejercicio 7","text":"<p>Mejora el programa anterior, de forma que el usuario pueda introducir tantos n\u00fameros como quiera. El programa solicitar\u00e1 n\u00fameros al usuario hasta que introduzca la palabra \"fin\". Entonces mostrar\u00e1 el mayor de todos por pantalla.</p> <p>Ejemplo:</p> <pre><code>Introduce un n\u00famero: 6\nIntroduce un n\u00famero: 9\nIntroduce un n\u00famero: 11\nIntroduce un n\u00famero: 3\nIntroduce un n\u00famero: 5\nIntroduce un n\u00famero: fin\nEl n\u00famero m\u00e1s alto es:  11\n</code></pre>"},{"location":"05-Listas-y-Tuplas/","title":"Listas y tuplas","text":"<p>Las listas permiten guardar m\u00e1s de un elemento dentro de una variable, y adem\u00e1s hacerlo en un orden concreto. Pueden contener un n\u00famero ilimitado de elementos de cualquier tipo:</p> <pre><code>    # Lista vac\u00eda\n    lista_vacia = []\n\n    # Lista con valores\n    alumnos = [\"Ane\", \"Unai\", \"Itziar\", \"Mikel\"]\n\n    # Acceder a elementos\n    print(alumnos[0]) # muestra \"Ane\"\n    print(alumnos[1]) # muestra \"Unai\"\n    print(alumnos[2]) # muestra \"Itziar\"\n    print(alumnos[-1]) # muestra \"Mikel\"\n\n    # Cambiar un elemento\n    alumnos[0] = \"Nora\" \n</code></pre> <p>Los m\u00e9todos m\u00e1s utilizados con las listas son los siguientes: | M\u00e9todo | Acci\u00f3n | |--|--| | <code>alumnos.append(\"Amaia\")</code> | Inserta \"Jon\" al final de la lista | | <code>alumnos.insert(0,\"Amaia\")</code> | Inserta \"Amaia\" en la posici\u00f3n 0 | | <code>alumnos.remove(\"Amaia\")</code> | Elimina la primera aparici\u00f3n de \"Amaia\" de la lista | | <code>alumnos.pop()</code> | Elimina el \u00faltimo elemento de la lista | | <code>alumnos.pop(3)</code> | Elimina el cuarto elemento de la lista | | <code>alumnos.clear()</code> | Elimina todos los elementos de la lista | | <code>alumnos.index(\"Amaia\")</code> | Devuelve el \u00edndice de la primera aparici\u00f3n de \"Amaia\" | | <code>alumnos.sort()</code> | Ordena la lista (los elementos deben ser comparables) | | <code>sorted(alumnos)</code> | Devuelve una copia de la lista 'alumnos' ordenada (no ordena la pasada como par\u00e1metro)  | | <code>alumnos.reverse()</code> | Ordena la lista en orden inverso | | <code>alumnos.copy()</code> | Devuelve una copia de la lista | | <code>alumnos.extend(otra_lista)</code> | Fusiona las dos listas |</p>"},{"location":"05-Listas-y-Tuplas/#acceder-a-varios-elementos-de-una-lista","title":"Acceder a varios elementos de una lista","text":"<p>Si queremos acceder a un subconjunto de elementos de la lista, es posible hacerlo de la siguiente manera:</p> <pre><code>lista = ['a','b','c','d','e','f']\n# Elementos de la segunda a la cuarta posici\u00f3n\nprint(lista[1:3]) # Salida: ['b', 'c']\n\n# Elementos desde la primera hasta la cuarta posici\u00f3n\nprint(lista[:3]) # Salida: ['a', 'b', 'c']\n\n# Elementos desde la tercera posici\u00f3n hasta el final\nprint(lista[2:]) # Salida: ['c', 'd', 'e', 'f']\n</code></pre>"},{"location":"05-Listas-y-Tuplas/#recorrer-una-lista","title":"Recorrer una lista","text":"<p>La forma habitual de recorrer una lista es mediante la sentencia <code>for</code>, tal y como muestra el ejemplo a continuaci\u00f3n:</p> <p><pre><code>    for elemento in ['Python','JavaScript','JAVA']:\n        print(\"Programo en \", elemento)\n</code></pre> De igual manera se podr\u00eda hacer mediante la sentencia <code>while</code>:</p> <pre><code>    lista =  ['Python','JavaScript','JAVA']\n    i = 0\n    sizeofList = len(lista) \n    while i &lt; sizeofList :\n        print(lista[i]) \n        i += 1\n</code></pre>"},{"location":"05-Listas-y-Tuplas/#tuplas","title":"Tuplas","text":"<p>Las tuplas son listas inmutables. Es decir, una vez declaradas, no se pueden realizar modificaciones sobre ellas (a\u00f1adir/eliminar elementos o hacer modificaciones sobre ellos). Para definir una tupla se escriben los elementos entre par\u00e9ntesis:</p> <p><pre><code>    valores = (1,2,3,4,5)\n    print(valores)  # Salida: (1, 2, 3, 4, 5) \n\n    # tuple with mixed datatypes\n    valores_mixtos = (1, \"Hola\", 2.5, False)\n    print(valores_mixtos)  # Salida: (1, 'Hola', 2.5, False)\n</code></pre> El acceso a sus elementos se hace de igual que con listas:</p> <pre><code>    valores = (\"a\", \"b\", \"c\",\"d\",\"e\",\"f\")  \n    print(valores[1]) # Salida: 'b'\n    print(valores[2:4]) # Salida: ('c', 'd')\n</code></pre> <p>Una acci\u00f3n t\u00edpica de las tuplas es \"desempaquetar\" (unpack) sus valores, es decir, asignarlos a variables directamente:</p> <pre><code>    tupla = (1, \"Hola\", 2.5) # Creamos la tupla\n\n    var1, var2, var3 = tupla # Hacemos el unpack\n\n    print(var1)      # 1\n    print(var2)      # 'Hola' \n    print(var3)      # 2.5\n</code></pre>"},{"location":"05-Listas-y-Tuplas/#coding-time","title":"Coding time!","text":""},{"location":"05-Listas-y-Tuplas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Dada la siguiente lista <code>[12, 23, 5, 29, 92, 64]</code> realiza las siguientes operaciones y vete mostrando la lista resultante por pantalla: 1. Elimina el \u00faltimo n\u00famero y a\u00f1\u00e1delo al principio. 2. Mueve el segundo elemento a la \u00faltima posici\u00f3n. 3. A\u00f1ade el n\u00famero <code>14</code> al comienzo de la lista. 4. Suma todos los n\u00fameros de la lista y a\u00f1ade el resultado al final de la lista. 5. Fusiona la lista actual con la siguiente: <code>[4, 11, 32]</code> 6. Elimina todos los n\u00fameros impares de la lista. 7. Ordena los n\u00fameros de la lista de forma ascendente. 8. Vac\u00eda la lista.</p> <p>Resultado:</p> <pre><code>[64, 12, 23, 5, 29, 92]\n[64, 23, 5, 29, 92, 12]\n[14, 64, 23, 5, 29, 92, 12]\n[14, 64, 23, 5, 29, 92, 12, 239]\n[14, 64, 23, 5, 29, 92, 12, 239, 4, 11, 32]\n[14, 64, 92, 12, 4, 32]\n[4, 12, 14, 32, 64, 92]\n[]\n</code></pre>"},{"location":"05-Listas-y-Tuplas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que solicite al usuario 5 n\u00fameros y los guarde en una lista. A continuaci\u00f3n el programa pedir\u00e1 otros 5 n\u00fameros al usuario almacen\u00e1ndolos en una segunda lista. El programa mostrar\u00e1 al usuario una lista que contenga los n\u00fameros que tienen en com\u00fan las dos listas anteriores. - Ejemplo: Lista 1 = <code>[6,14,11,78,5]</code> y Lista 2 = <code>[3,14,22,78,9]</code> - Resultado: <code>[14, 78]</code></p>"},{"location":"06-Diccionarios/","title":"Diccionarios","text":"<p>Un diccionario es un conjunto de parejas clave- valor (key-value). Es decir, se accede a cada elemento a partir de su clave. Se definen de la siguiente manera:</p> <pre><code>estudiante = {\n    \"nombre\": \"I\u00f1aki Perurena\",\n    \"edad\": 30,\n    \"nota_media\": 7.25,\n    \"repetidor\" : False\n}\n</code></pre> <p>Las claves tienen que ser \u00fanicas y estar formadas por un string o un n\u00famero. Para acceder al valor de una clave exiten dos maneras distintas:</p> <pre><code># Acceder al valor de una clave\nedad = estudiante[\"edad\"] # devuelve el valor de 'edad'\nnota_media = estudiante.get(\"nota_media\") # devuelve el valor de 'nota_media'\n\n# Insertar o actualizar un valor:\nestudiante[\"edad\"] = 25 # actualiza el valor de 'edad'\nestudiante[\"suspensos\"] = 3 # inserta una nueva pareja clave - valor\n\n# insertar una pareja clave - valor o actualizar si ya existe:\nestudiante.update({'aprobados':'8'})\n</code></pre> <p>Algunos de los m\u00e9todos m\u00e1s utilizados son los siguientes:</p>    M\u00e9todo Acci\u00f3n     <code>diccionario.keys()</code> Devuelve todas las claves del diccionario   <code>diccionario.values()</code> Devuelve todos los valores del diccionario   <code>diccionario.pop(clave[,&lt;default&gt;])</code> Elimina la clave del diccionario y devuelve su valor asociado. Si no la encuentra y se indica un valor por defecto, devuelve el valor por defecto indicado.   <code>diccionario.clear()</code> Vac\u00eda el diccionario   <code>clave in diccionario</code> Devuelve True si el diccionario contiene la clave o False en caso contrario.   <code>valor in diccionario.values()</code> Devuelve True si el diccionario contiene el valor o False en caso contrario."},{"location":"06-Diccionarios/#recorrer-un-diccionario","title":"Recorrer un diccionario","text":"<p>La forma m\u00e1s habitual de recorrer un diccionario es mediante la sentencia <code>for</code>. Al recorrer un diccionario, por defecto se iterar\u00e1 sobre sus claves:</p> <p><pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario:\n    print(key)\n\n# Resultado: a b c\n</code></pre> Es decir, el c\u00f3digo anteiror ser\u00e1 equivalente al siguiente: <pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario.keys():\n    print key\n\n# Resultado: a b c\n</code></pre> Por lo tanto, para iterar accediendo a los valores, realizaremos lo siguiente:</p> <p><pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario:\n    print(diccionario[key])\n\n# Resultado: 1 2 3\n</code></pre> Otro manera alternativa ser\u00eda empleando la funci\u00f3n <code>items()</code>, la cual devuelve el diccionario como tuplas de tipo (key,value): <pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key, value in diccionario.items():\n    print(\"El valor de %s is %d\" % (key, value))\n\n# Resultado:\n# El valor de a is 1\n# El valor de b is 2\n# El valor de c is 3\n</code></pre></p>"},{"location":"06-Diccionarios/#borrar-un-elemento","title":"Borrar un elemento","text":"<p>Para borrar un elemento de un diccionario se utiliza la instrucci\u00f3n <code>del</code>. <pre><code>edades = {\n   \"Ane\" : 22,\n   \"Jokin\" : 27,\n   \"Aitor\" : 15\n}\ndel edades[\"Aitor\"]\n</code></pre> Otra alternativa tambi\u00e9n utilizada y mencionada anteriormente es la funci\u00f3n <code>pop()</code>, el cual devuelve el valor del elemento eliminado:</p> <p><pre><code>edades = {\n   \"Ane\" : 22,\n   \"Jokin\" : 27,\n   \"Aitor\" : 15\n}\nedades.pop(\"Aitor\")\n</code></pre> Un diccionario nunca deber\u00eda contener dos claves iguales. No obstante, en caso de contener una clave repetida, tanto <code>del</code> como <code>pop()</code> eliminar\u00e1n todas las claves coincidentes.</p>"},{"location":"06-Diccionarios/#coding-time","title":"Coding time!","text":""},{"location":"06-Diccionarios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que recorra una lista y cree un diccionario que contenga el n\u00famero de veces que aparece cada n\u00famero en la lista. - Ejemplo: <code>[12, 23, 5, 12, 92, 5,12, 5, 29, 92, 64,23]</code> - Resultado: <code>{12: 3, 23: 2, 5: 3, 92: 2, 29: 1, 64: 1}</code></p>"},{"location":"06-Diccionarios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Recorre un diccionario y crea una lista solo con los valores que contiene, sin a\u00f1adir valores duplicados. - Ejemplo: <code>{'Mikel': 3, 'Ane': 8, 'Amaia': 12, 'Unai': 5, 'Jon': 8, 'Ainhoa': 7, 'Maite': 5}</code> - Resultado: <code>[3, 8, 12, 5, 7]</code></p>"},{"location":"06-Diccionarios/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea una programa de Login que compruebe el usuario y contrase\u00f1a en el diccionario a continuaci\u00f3n:</p> <pre><code>usuarios = {  \n      \"iperurena\": {  \n          \"nombre\": \"I\u00f1aki\",  \n          \"apellido\": \"Perurena\",  \n          \"password\": \"123123\"  \n      },  \n      \"fmuguruza\": {  \n           \"nombre\": \"Ferm\u00edn\",  \n          \"apellido\": \"Muguruza\",  \n          \"password\": \"654321\"  \n      },  \n      \"aolaizola\": {  \n           \"nombre\": \"Aimar\",  \n          \"apellido\": \"Olaizola\",  \n          \"password\": \"123456\"  \n      }  \n    }\n</code></pre> <p>El usuario tendr\u00e1 un m\u00e1ximo de 3 intentos, y al acceder correctamente se mostrar\u00e1 el nombre y apellido del usuario.</p>"},{"location":"06-Diccionarios/#ejercicio-4","title":"Ejercicio 4","text":"<p>Crea un programa que permita introducir a un profesor las notas de sus estudiantes (m\u00e1ximo 10 estudiantes). Los datos se deber\u00e1n almacenar en un diccionario como el siguiente:</p> <p><pre><code>estudiantes = {  \n   \"1\": {  \n      \"nombre\": \"Lorea\",  \n      \"nota\": 8  \n  },  \n  \"2\": {  \n      \"nombre\": \"Markel\",  \n      \"nota\": \"4.2\"  \n  },  \n  \"3\": {  \n      \"nombre\": \"Julen\",  \n      \"nota\": 6.5  \n  }  \n}\n</code></pre> Una vez introducidos todos los datos, el programa mostrar\u00e1 una lista con los nombres de los estudiantes que han suspendido y otra con los que han aprobado. Tambi\u00e9n calcular\u00e1 y mostrar\u00e1 la nota media de la clase.</p>"},{"location":"07-Funciones/","title":"Funciones","text":"<p>Una funci\u00f3n es un grupo de sentencias que realizan una tarea concreta. Esta forma de agrupar c\u00f3digo es una forma de ordenar nuestra aplicaci\u00f3n en peque\u00f1os bloques, facilitando as\u00ed su lectura y permitiendo reutilizar el c\u00f3digo que contienen sin esfuerzo.</p>"},{"location":"07-Funciones/#definir-y-llamar-a-una-funcion","title":"Definir y llamar a una funci\u00f3n","text":"<p>La sintaxis de una funci\u00f3n en Python es la siguiente:</p> <pre><code>def saludo(nombre):\n# codigo de la funci\u00f3n\n    print(\"Hola, \" + nombre+ \". \u00a1Bienvenido!\")\n</code></pre> <p>Se escribe la palabra reservada <code>def</code> seguida del nombre de la funci\u00f3n y sus par\u00e1metros entre par\u00e9ntesis.</p> <p>Para llamar a una funci\u00f3n solo hay que escribir el nombre de la funci\u00f3n seguida de los par\u00e1metros (si los hubiera) entre par\u00e9ntesis.</p> <pre><code>&gt;&gt;&gt; saludo('Maitane')\nHola, Maitane. \u00a1Bienvenida!\n</code></pre> <p>Es posible asignar al par\u00e1metro un valor por defecto.</p> <p><pre><code>def saludo(nombre = \"An\u00f3nimo\"):  \n    print(\"Hola, \" + nombre+ \". \u00a1Bienvenido!\")\n\nsaludo(\"Leire\") # Hola, Maitane. \u00a1Bienvenida!\nsaludo() # Hola, An\u00f3nimo. \u00a1Bienvenida!\n</code></pre> Existen dos tipos de par\u00e1metros o argumentos:</p> <ul> <li>Par\u00e1metros posicionales: la posici\u00f3n en la que se pasan importa</li> <li>Par\u00e1metros con palabra clave (keyword arguments): la posici\u00f3n no    importa, se indica una clave para cada par\u00e1metro.</li> </ul> <pre><code>def suma(a, b):\n    resultado = a + b\n    print(resultado)\nsuma(45, 20) # par\u00e1mentros posicionales\nsuma(b=20,a=45) # parametros mediante clave\n</code></pre> <p>Las funciones pueden devolver un valor utilizando la palabra <code>return</code>. Una vez devuelto un valor, la funci\u00f3n finaliza su ejecuci\u00f3n.</p> <pre><code>def suma(a, b):\n    resultado = a + b\n    return resultado\n\nprint(suma(4,5)) # 9\n</code></pre>"},{"location":"07-Funciones/#funciones-con-argumentos-multiples","title":"Funciones con argumentos m\u00faltiples","text":"<p>Es posible recibir un n\u00famero desconocido de par\u00e1metros a\u00f1adiendo un <code>*</code> en la definici\u00f3n de la funci\u00f3n.</p> <pre><code>def suma_todo(*args):\n    resultado = 0\n    for i in args:\n        resultado += i\n        return resultado\nv, w, x, y, z = 5, 2, 12, 6, 9\ntotal = suma_todo(v, w, x, y, z)\nprint(\"La suma total es:\" + str(total))  # La suma total es: 34\n</code></pre>"},{"location":"07-Funciones/#ambito-de-las-variables-scope","title":"\u00c1mbito de las variables (scope)","text":"<p>El \u00e1mbito de una variable (scope) se refiere a la zona del programa d\u00f3nde una variable \"existe\". Fuera del \u00e1mbito de una variable no podremos acceder a su valor ni manejarla.</p> <p>Los par\u00e1metros y variables definidos en una funci\u00f3n no estar\u00e1n accesibles fuera de la funci\u00f3n. A este \u00e1mbito se le conoce como \u00e1mbito local. Es importante mencionar que una vez ejecutada una funci\u00f3n, el valor de las variables locales no se almacena, por lo que la pr\u00f3xima vez que se llame a la funci\u00f3n, \u00e9sta no recordar\u00e1 ning\u00fan valor de llamadas anteriores.</p> <pre><code>def calcula():\n    a = 1\n    print(\"Dentro de la funci\u00f3n:\", a)\n\na = 5\ncalcula()\nprint(\"Fuera de la funci\u00f3n:\", a)\n\n### Output ###\n# Dentro de la funci\u00f3n:1\n# Fuera de la funci\u00f3n:5\n</code></pre> <p>Por el contrario, las variables definidas fuera de una funci\u00f3n s\u00ed que est\u00e1n accesibles desde dentro de la funci\u00f3n. Se considera que est\u00e1n en el \u00e1mbito global. No obstante, no se podr\u00e1n modificar dentro de la funci\u00f3n a no ser que est\u00e9n definidas con la palabra clave <code>global</code>.</p>"},{"location":"07-Funciones/#coding-time","title":"Coding time!","text":""},{"location":"07-Funciones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que determine si un n\u00famero es primo o no. Deber\u00e1s crear la funci\u00f3n <code>esPrimo()</code> que reciba como par\u00e1metro un n\u00famero y devuelva <code>True</code> o <code>False</code> indicando si el n\u00famero es primo o no.</p>"},{"location":"07-Funciones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que genere un n\u00famero aleatorio del 1 al 10. El usuario tendr\u00e1 que adivinarlo, y el programa tras cada intento le indicar\u00e1 al usuario si el n\u00famero es m\u00e1s alto, bajo o si ha acertado. La l\u00f3gica para dar la respuesta al usuario deber\u00e1 estar incluida en una funci\u00f3n a la que se llamar\u00e1 tras cada intento.</p> <p>Nota: Para la creaci\u00f3n del n\u00famero aleatorio, utiliza el siguiente c\u00f3digo:</p> <pre><code>from random import randint, uniform,random\n\nnumero = randint(0,10)\n</code></pre>"},{"location":"07-Funciones/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea un programa que reciba un n\u00famero del 1 al 20 introducido por el usuario y compruebe si est\u00e1 dentro de la siguiente lista: <code>[6,14,11,3,2,1,15,19]</code>. Implementa una funci\u00f3n que se asegure que el n\u00famero introducido por el usuario est\u00e1 en el rango indicado y otra que compruebe si est\u00e1 dentro de la lista. Trata de crear las funciones de forma que puedan ser reutilizadas lo m\u00e1ximo posible en otros programas.</p>"},{"location":"08-Excepciones/","title":"Excepciones","text":"<p>Las excepciones son errores en la ejecuci\u00f3n de un programa que hacen que el programa termine de forma inesperada. Normalmente ocurren debido a un uso indebido de los datos (p.ej. una divisi\u00f3n entre cero). La manera de controlar las excepciones es agrupando el c\u00f3digo en 2 bloques (m\u00e1s 1 opcional):</p> <ul> <li><code>try</code>: agrupa el bloque de c\u00f3digo en el que se pueda dar una excepci\u00f3n.</li> <li><code>catch</code>: contiene el c\u00f3digo a ejecutar en caso de que la excepci\u00f3n haya    sido lanzada.</li> <li><code>finally</code> (opcional): permite ejecutar un bloque de    c\u00f3digo siempre,    se haya capturado o no una excepci\u00f3n.</li> </ul> <pre><code>try:\n    numero = int(input(\u2018Introduce un n\u00famero: \u2018))\n    dividendo = 150\n    resultado = dividendo / numero\n    print(resultado)\nexcept ValueError:\n    print(\u2018N\u00famero inv\u00e1lido\u2019)\nexcept ZeroDivisionError:\n    print(\u2018No se puede dividir entre 0\u2019)\nfinally:\n    print(\"Ejecutando finally antes de salir\")\n</code></pre> <p>Tambi\u00e9n es posible lanzar excepciones de forma controlada mediante la sentencia raise.</p> <pre><code>    raise NameError('\u00a1Soy una excepci\u00f3n!')\n</code></pre>"},{"location":"08-Excepciones/#excepciones-comunes","title":"Excepciones comunes","text":"<p>Hay algunas excepciones que son bastante comunes a la hora de programar en Python y que deber\u00edamos contemplar en nuestros programas:</p> <p>TypeError  es lanzado cuando se intenta realizar una operaci\u00f3n o una funci\u00f3n sobre un objeto de un tipo inapropiado. <pre><code>&gt;&gt;&gt; '1'+1  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#23&gt;\", line 1, in &lt;module&gt;  \n'2'+2  \nTypeError: must be str, not int\n</code></pre></p> <p>ValueError  es lanzado cuando el argumento de una funci\u00f3n es de un tipo inapropiado. <pre><code>&gt;&gt;&gt; int('hola')  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#14&gt;\", line 1, in &lt;module&gt;  \nint('xyz')  \nValueError: invalid literal for int() with base 10: 'hola'\n</code></pre></p> <p>NameError  es lanzado cuando no utiliza un objeto que no existe. <pre><code>&gt;&gt;&gt; persona  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#6&gt;\", line 1, in &lt;module&gt;  \nage  \nNameError: name 'persona' is not defined\n</code></pre></p> <p>IndexError es lanzado al intentar acceder a un \u00edndice que no existe en un array. <pre><code>&gt;&gt;&gt; lista = [1,2,3]  \n&gt;&gt;&gt; lista[5]  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#18&gt;\", line 1, in &lt;module&gt;  \nlista[5]  \nIndexError: list index out of range\n</code></pre></p> <p>KeyError  es lanzado cuando no se encuentra la clave (key), <pre><code>&gt;&gt;&gt; diccionario={'1':\"esto\", '2':\"es\", '3':\"python\"}  \n&gt;&gt;&gt; diccionario['4']  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#15&gt;\", line 1, in &lt;module&gt;  \ndiccionario['4']  \nKeyError: '4'\n</code></pre></p> <p>ModuleNotFoundError es lanzado cuando no se encuentra el m\u00f3dulo indicado. <pre><code>&gt;&gt;&gt; import mimodulo  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#10&gt;\", line 1, in &lt;module&gt;  \nimport mimodulo  \nModuleNotFoundError: No module named 'mimodulo'\n</code></pre></p>"},{"location":"08-Excepciones/#coding-time","title":"Coding time!","text":""},{"location":"08-Excepciones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que acceda a la posici\u00f3n que el usuario indique de la siguiente lista: <code>[6,14,11,3,2,1,15,19]</code>. No olvides capturar las excepciones que puedan surgir en caso de que el usuario introduzca un \u00edndice incorrecto o que no exista en la lista.</p>"},{"location":"08-Excepciones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea una aplicaci\u00f3n reciba la clave de un diccionario y acceda a uno de sus valores. Aseg\u00farate de que capturas las excepciones que puedan saltar al intentar acceder a una clave del diccionario inexistente.</p>"},{"location":"09-Clases-y-Objetos/","title":"Clases y objetos","text":"<p>Python soporta la programaci\u00f3n orientada a objetos. Esto quiere decir que podemos definir entidades agrupando (encapsulando) sus atributos y comportamiento (m\u00e9todos) en clases.</p> <p>La definici\u00f3n de una clase en Python se hace de la siguiente manera:</p> <pre><code>class Persona: \n    # atributos\n    nombre = \"Josune\"\n    edad = 24 \n\n    # metodos\n    def camina(self):\n        print(self.nombre + \" est\u00e1 caminando\")\n</code></pre> <p>Una clase es como una plantilla o modelo para crear a partir de ella objetos. Esta plantilla contiene la informaci\u00f3n para definir c\u00f3mo ser\u00e1n los objetos, es decir, qu\u00e9 atributos y m\u00e9todos tendr\u00e1n.</p> <p>A partir de una clase se pueden crear tantos objetos como se desee. Los objetos de una clase se conocen como instancias. Cada objeto contiene los atributos y m\u00e9todos de la clase y podr\u00e1 asignar a esos atributos unos valores concretos. Esto se conoce como el estado de un objeto.</p> <pre><code>p1 = Persona() # la variable p1 contiene un objeto de la clase Persona\np1.camina()\nprint(p1.nombre)  \nprint(p1.edad)\n</code></pre> <p>Una funci\u00f3n dentro de una clase se conoce como m\u00e9todo. Las clases contienen el m\u00e9todo especial <code>__init__</code> conocido como constructor y que sirve para inicializar un objeto. Al crear un objeto siempre se llama al constructor. Una diferencia importante con otros lenguajes como Java es que solo se puede definir un \u00fanico constructor.</p> <pre><code>class Persona:  \n    def __init__(self, nombre, apellidos, edad):  \n        self.nombre= nombre\n        self.apellidos = apellidos \n        self.edad = edad \n\n    def camina(self):\n        print(self.nombre + \" est\u00e1 caminando\")\n</code></pre> <p>En la creaci\u00f3n del objeto es necesario indicar los argumentos del constructor:</p> <pre><code>p1 = Persona(\"Mike\", \"Mendiola\", 25)\np1.camina()\nprint(p1.nombre)  \nprint(p1.edad)\n</code></pre> <p>El par\u00e1metro <code>self</code> de los m\u00e9todos es una referencia a la propia instancia y se utiliza para acceder a las variables que pertenecen a la clase. Si no se define un constructor, la clase hereda uno que \u00fanicamente recibe el argumento <code>self</code>.</p>"},{"location":"09-Clases-y-Objetos/#atributos-de-clase-vs-atributos-de-instancia","title":"Atributos de clase vs Atributos de instancia","text":"<p>Los atributos definidos dentro del constructor se conocen como atributos de instancia, por lo tanto, los atributos definidos dentro de la clase pero fuera del constructor se conocen como atributos de clase.</p> <p>La principal diferencia es que un atributto de clase puede ser accedido aunque no existan instancias de la clase. Adem\u00e1s, si se modifica su valor, se modificar\u00e1 el valor en todas las instancias existentes de dicha clase.</p> <pre><code>class Demo:\n    atrib_estatico = 123 # compartido por todos los objetos\n    def __init__(self,numero):\n        self.atrib_instancia = numero # espec\u00edfico de cada objeto\n\nc1 = Demo(456)\nc2 = Demo(789)\n\n# Valor inicial\nprint(f\"C1: Estatico {1.atrib_estatico} - Instancia: {c1.atrib_instancia}\")\n# output: C1: Estatico 123 - Instancia: 456\nprint(f\"C2: Estatico {c2.atrib_estatico} - Instancia: {c2.atrib_instancia}\")\n# output: C2: Estatico 123 - Instancia: 789\n\nDemo.atrib_estatico = -1\n\nprint(f\"C2: Estatico {c2.atrib_estatico} - Instancia: {c2.atrib_instancia}\")\n# output: C2: Estatico -1 - Instancia: 456\nprint(f\"C2: Estatico {c2.atrib_estatico} - Instancia: {c2.atrib_instancia}\")\n# output: C2: Estatico -1 - Instancia: 789\n\nc1.atrib_instancia = 999\n\nprint(f\"C1: Estatico {c1.atrib_estatico} - Instancia: {c1.atrib_instancia}\")\n# output: C1: Estatico -1 - Instancia: 999\n\nprint(f\"C2: Estatico {c2.atrib_estatico} - Instancia: {c2.atrib_instancia}\")\n# output: C2: Estatico -1 - Instancia: 789\n</code></pre> <p>Es importante remarcar que para acceder a los atributos de instancia se debe utilizar la palabra reservada <code>self</code>, la cual hace referencia al objeto actual. En Python no podemos utilizar <code>self</code> en cualquier momento, para utilizarlo hay que indicarlo en los m\u00e9todos c\u00f3mo el primer par\u00e1metro recibido.</p> <pre><code>class Persona:  \n    def __init__(self, nombre, apellidos, edad):  \n        self.nombre= nombre\n        self.apellidos = apellidos \n        self.edad = edad \n\n    def camina(self): # es necesario indicar 'self' como primer argumento\n        print(self.nombre + \" est\u00e1 caminando\")\n\np1 = Persona(\"Mike\", \"Mendiola\", 25) # no hay que pasarle 'self'\np1.camina() # no hay que pasarle 'self'\nprint(p1.nombre)  \nprint(p1.edad)\n</code></pre>"},{"location":"09-Clases-y-Objetos/#private-y-protected","title":"Private y protected","text":"<p>A diferencia de otros lenguajes de Programaci\u00f3n Orientada a Objetos, todos los m\u00e9todos y atributos en Python son p\u00fablicos. Es decir, no es posible definir una variable como <code>private</code> o <code>protected</code>. </p> <p>Existe una convenci\u00f3n de a\u00f1adir como prefijo un gui\u00f3n bajo (<code>_</code>) a los atributos que consideramos como protected y dos guiones bajos (__) a las variables que consideramos private.</p> <pre><code>class Persona:\n    def __init__(self, nombre, edad):\n        self._nombre = nombre  # atributo protected \n        self.__edad = edad # atributo private\n</code></pre>"},{"location":"09-Clases-y-Objetos/#coding-time","title":"Coding time!","text":""},{"location":"09-Clases-y-Objetos/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea la clase Coche que contenga las siguientes propiedades:</p> <ul> <li><code>matr\u00edcula</code> (string)</li> <li><code>marca</code> (string)</li> <li><code>kilometros_recorridos</code> (float)</li> <li><code>gasolina</code> (float)</li> </ul> <p>La clase tendr\u00e1 un m\u00e9todo llamado <code>avanzar()</code> que recibir\u00e1 como argumento el n\u00famero de kil\u00f3metros a conducir y sumar\u00e1 los kil\u00f3metros recorridos al valor de la propiedad <code>kilometros_recorridos</code>. El m\u00e9todo tambi\u00e9n restar\u00e1 al valor de <code>gasolina</code> el resultado de los kil\u00f3metros multiplicado por 0'1. La clase tambi\u00e9n contendr\u00e1 otro m\u00e9todo llamado <code>repostar()</code> que recibir\u00e1 como argumento los litros introducidos que deber\u00e1n sumarse a la variable <code>gasolina</code>. Por \u00faltimo, ser\u00e1 necesario controlar que el m\u00e9todo avanzar nunca obtendr\u00e1 un n\u00famero negativo en la gasolina. En dicho caso, deber\u00e1 mostrar el siguiente mensaje: \"Es necesario repostar para recorrer la cantidad indicada de kil\u00f3metros\".</p> <p>Ejemplo:</p> <ul> <li><code>avanzar(50)</code> # gasolina = 50</li> <li><code>avanzar(100)</code> # kilometros_recorridos = 100, gasolina = 40</li> <li><code>avanzar(40)</code> # kilometros_recorridos = 140, gasolina = 36</li> <li><code>avanzar(180)</code> # kilometros_recorridos = 320, gasolina = 18</li> </ul>"},{"location":"09-Clases-y-Objetos/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea una clase Robot que simule los movimientos de un robot y calcule la posici\u00f3n en la que se encuentra cada momento. El robot se mover\u00e1 por un tablero infinito de coordenadas X e Y, podr\u00e1 realizar los siguientes movimientos: - Avanzar hacia adelante (A) - Retroceder (R) - Avanzar hacia la izquierda (I) o hacia la derecha (D)</p> <p>El robot tendr\u00e1 un m\u00e9todo llamado <code>mueve()</code> que recibir\u00e1 la orden como par\u00e1metro y otro m\u00e9todo, <code>posicion_actual()</code>,  que indicar\u00e1 su posici\u00f3n en las coordenadas X e Y. Al crear el robot este se inicializar\u00e1 a las coordenadas (0,0).</p> <p>Puedes utilizar el siguiente c\u00f3digo para probar la clase creada:</p> <pre><code>miRobot = Robot()\norden = \"A\"\nwhile orden != 'fin':\n    orden = input(\"Introduce la orden: \")\n    miRobot.mueve(orden)\n    print(miRobot.posicion_actual())\n</code></pre> <p>Ejemplo:</p> <pre><code>&gt;&gt; Introduce la orden: A\nPosici\u00f3n actual: 1,0\n&gt;&gt; Introduce la orden: A\nPosici\u00f3n actual: 2,0\n&gt;&gt; Introduce la orden: I\nPosici\u00f3n actual: 2,-1\n&gt;&gt; Introduce la orden: A\nPosici\u00f3n actual: 3,-1\n&gt;&gt; Introduce la orden: I\nPosici\u00f3n actual: 3,-2\n&gt;&gt; Introduce la orden: D\nPosici\u00f3n actual: 3,-1\n&gt;&gt; Introduce la orden: R\nPosici\u00f3n actual: 2,-1\n&gt;&gt; Introduce la orden: fin\n</code></pre>"},{"location":"09-Clases-y-Objetos/#ejercicio-3","title":"Ejercicio 3","text":"<p>Mejora el ejercicio anterior de forma que el robot pueda recibir una secuencia de movimientos. Por ejemplo: - mueve(\"AADDADIR\")</p> <p>Tambi\u00e9n deber\u00e1 tener otros dos m\u00e9todos: uno que devuelva todas las \u00f3rdenes recibidas y otro capaz de listar los movimientos necesarios para volver a la posici\u00f3n inicial (0,0).</p> <p>Aqu\u00ed tienes un ejemplo de una posible ejecuci\u00f3n del programa:</p> <pre><code>Introduce la orden: AADAD\nPosici\u00f3n actual: 3,2\nIntroduce la orden: IAADR\nPosici\u00f3n actual: 4,2\nIntroduce la orden: fin\nPosici\u00f3n actual: 4,2\n\n\u00d3rdenes recibidas: AADADIAADRfin\nSecuencia para posici\u00f3n inicial: RRRRII\n</code></pre>"},{"location":"09-Clases-y-Objetos/#ejercicio-4","title":"Ejercicio 4","text":"<p>Crea la clase Triangulo que almacene la longitud de cada uno de sus lados. Deber\u00e1 contener los siguientes m\u00e9todos: - <code>area()</code>: devuelve el \u00e1rea del tri\u00e1ngulo - <code>forma()</code>: indica si se trata de un tri\u00e1ngulo equil\u00e1tero, is\u00f3sceles o irregular. - <code>per\u00edmetro()</code>: devuelve el per\u00edmetro del tri\u00e1ngulo.</p>"},{"location":"10-Herencia/","title":"Herencia","text":"<p>La herencia es una t\u00e9cnica de la Programaci\u00f3n Orientada a Objetos en la que una clase (conocida como clase hija o subclase) hereda todos los m\u00e9todos y propiedades de otra clase (conocida como padre o clase base).</p> <p>La sintaxis para definir una clase que herede de otra es la siguiente:</p> <pre><code>class ClaseBase:\n    # c\u00f3digo de la clase base\n\nclass Subclase(BaseClass):\n    # c\u00f3digo de la subclase\n</code></pre> <p>La subclase puede a\u00f1adir funcionalidades. Esta t\u00e9cnica permite reutilizar c\u00f3digo.</p> <pre><code>class Dispositivo:\n    def __init__(self,identificador,marca):\n        self.identificador = identificador\n        self.marca = marca\n\n    def conectar(self):\n        print(\"\u00a1Conectado!\")\n\n# la clase base se indica entre par\u00e9ntesis\nclass Teclado(Dispositivo):\n    def __init__(self,identificador,marca,tipo):\n        # llamada al constructor del padre\n        Dispositivo.__init__(self,identificador,marca)\n        self.tipo = tipo\n    # metodo de la subclase\n    def pulsar_tecla(self,tecla):\n        print(tecla)\n\nt1 = Teclado(\"0001\", \"Logitech\", \"AZERTY\")\nprint(f\"Id: {t1.identificador}, Marca: {t1.marca}, tipo: {t1.tipo}\")\nt1.conectar()\nt1.pulsar_tecla(\"a\")\n</code></pre>"},{"location":"10-Herencia/#herencia-multiple","title":"Herencia m\u00faltiple","text":"<p>Python soporta la herencia m\u00faltiple, es decir, heredad m\u00e9todos y atributos de m\u00e1s de un padre. En caso de heredar atributos o m\u00e9todos con el mismo nombre, Python dar\u00e1 prioridad al posicionado m\u00e1s a la izquierda en la declaraci\u00f3n.</p> <pre><code># en caso de conflicto Dispositivo tendr\u00e1 prioridad sobre Perif\u00e9rico\nclass Teclado(Dispositivo, Perif\u00e9rico):\n    # cuerpo de la clase\n</code></pre>"},{"location":"10-Herencia/#coding-time","title":"Coding time!","text":""},{"location":"10-Herencia/#ejercicio-1","title":"Ejercicio 1","text":"<p>Continuando con el Ejercicio 1 del tema anterior, crea una clase <code>Veh\u00edculo</code> y otra llamada <code>Bicicleta</code>. La clase Veh\u00edculo ser\u00e1 el padr\u00e9 de <code>Coche</code> y <code>Bicicleta</code> y contendr\u00e1 las propiedades y/o m\u00e9todos comunes de ambos. La bicicleta no tendr\u00e1 gasolina ni repostar\u00e1, pero cada 50 kilometros necesitar\u00e1 invocar al m\u00e9todo <code>hinchar_ruedas()</code> o no podr\u00e1 continuar.</p> <p>Puedes utilizar este c\u00f3digo para comprobar que todo funciona correctamente:</p> <pre><code># Coche:\ncoche = Coche(\"1122PKL\",\"Audi\")\ncoche.repostar(20)\ncoche.avanzar(120)\nprint(f\"Total de kms coche: {coche.kilometros}. Gasolina: {coche.gasolina}\")\ncoche.avanzar(40)\nprint(f\"Total de kms coche: {coche.kilometros}. Gasolina: {coche.gasolina}\")\n\n# Bicicleta\nbicicleta = Bicicleta(\"BH\")\nbicicleta.avanzar(30)\nprint(f\"Total de kms bici: {bicicleta.kilometros}\")\nbicicleta.avanzar(25)\nprint(f\"Total de kms bici: {bicicleta.kilometros}\")\nbicicleta.hinchar_ruedas()\nbicicleta.avanzar(25)\nprint(f\"Total de kms bici: {bicicleta.kilometros}\")\n</code></pre> <p>Resultado:</p> <pre><code>Total de kms coche: 120. Gasolina: 8.0\nTotal de kms coche: 160. Gasolina: 4.0\n\nTotal de kms bici: 30\nEs necesario hinchar para recorrer la cantidad indicada de kms.\nTotal de kms bici: 30\nTotal de kms bici: 55\n</code></pre>"},{"location":"10-Herencia/#ejercicio-2","title":"Ejercicio 2","text":"<p>Continuando con el Ejercicio 4 del tema anterior, crea una clase <code>Poligono</code> y otra llamada <code>Cuadrado</code>. La clase <code>Poligono</code> ser\u00e1 el padre de <code>Triangulo</code> y <code>Cuadrado</code>, y contendr\u00e1 las propiedades y m\u00e9todos comunes de ambos. Ambos tendr\u00e1n tambi\u00e9n otra propiedad llamada <code>color</code>.</p> <pre><code>t1 = Triangulo(\"rojo\",[2, 5, 2])\nprint(f\" Es un {t1.forma()} {t1.color} con {t1.perimetro()}m de per\u00edmetro.\")\n\nc1 = Cuadrado(\"azul\",[4, 4, 4, 4])\nprint(f\" Cuadrado {c1.color} con {c1.perimetro()}m de per\u00edmetro.\")\n</code></pre> <p>Resultado:</p> <pre><code>Es un Tri\u00e1ngulo is\u00f3sceles rojo con 9m de per\u00edmetro.\nCuadrado azul con 16m de per\u00edmetro.\n</code></pre>"},{"location":"11-Modulos-y-Paquetes/","title":"M\u00f3dulos y Paquetes","text":""},{"location":"11-Modulos-y-Paquetes/#modulos","title":"M\u00f3dulos","text":"<p>Un m\u00f3dulo es un archivo de Python que contiene variables, funciones y clases. Es una forma de ordenar y reutilizar c\u00f3digo ya que todo el contenido de un m\u00f3dulo es accesible por los archivos que lo importen.</p> <pre><code># mundo.py\n\ndef hola_mundo():\n    print(\"\u00a1Hola Mundo!\")\n\ndef adios_mundo():\n    print(\"\u00a1Adios Mundo!\")\n</code></pre> <p>Para acceder a las funciones desde otro archivo Python se utiliza la palabra reservada <code>import</code>:</p> <pre><code># app.py\n\nimport mundo\n\n# Llamada a la funci\u00f3n\nmundo.hola_mundo()\n</code></pre> <p>Tambi\u00e9n existe la posibilidad de importar \u00fanicamente objetos concretos de un m\u00f3dulo mediante la sintaxis <code>from ... import</code>:</p> <pre><code># app.py\n\nfrom mundo import adios_mundo\n\n# Llamada a la funci\u00f3n\nadios_mundo()\n</code></pre> <p>De esta forma no es necesario escribir el nombre del modulo antes de utilizar la funci\u00f3n. De igual manera, se pueden importar varios objetos de un m\u00f3dulo separ\u00e1ndolos por una coma:</p> <pre><code># app.py\n\nfrom mundo import adios_mundo, hola_mundo\n</code></pre> <p>Para importar todos los los objetos de un m\u00f3dulo basta con utilizar el asterisco:</p> <pre><code># app.py\n\nfrom mundo import *\n</code></pre>"},{"location":"11-Modulos-y-Paquetes/#localizacion-de-los-modulos","title":"Localizaci\u00f3n de los m\u00f3dulos","text":"<p>Al importar un m\u00f3dulo Python lo buscara en los siguientes directorios:</p> <ol> <li>En el directorio actual.</li> <li>En los directorios declarados en el <code>PYTHONPATH</code> (variable de entorno que contiene un listado de directorios)</li> <li>En el directorio de instalaci\u00f3n de Python por defecto (en UNIX normalmente '<code>/usr/local/lib/python</code>/')</li> </ol>"},{"location":"11-Modulos-y-Paquetes/#paquetes","title":"Paquetes","text":"<p>Es posible agrupar los m\u00f3dulos que tienen relaci\u00f3n en un mismo directorio. Estos directorios son conocidos en Python como paquetes y deben contener siempre un archivo llamado <code>__init__.py</code> para que Python lo reconozca como un paquete.</p> <p>A medida que desarrollamos una aplicaci\u00f3n es habitual agrupar los archivos en directorios (paquetes) para tener el c\u00f3digo organizado.</p> <p>Para cargar un m\u00f3dulo ubicado en un paquete lo haremos de la siguiente forma:</p> <p><pre><code>import mipaquete.mundo\n</code></pre> o bien de la siguiente manera: <pre><code>from mipaquete import mundo\n</code></pre> Tambi\u00e9n es posible importar elementos concretos de un m\u00f3dulo: <pre><code>from mipaquete.mundo import adios_mundo, hola_mundo\n</code></pre></p>"},{"location":"99-Proximos-pasos/","title":"Pr\u00f3ximos pasos","text":"<p>Como ya te hab\u00edamos adelantado, tu viaje en el mundo de Python solo acaba de empezar. Python es uno de los lenguajes de programaci\u00f3n con mayor potencial, y ahora que ya dispones de una s\u00f3lida base de los fundamentos b\u00e1sicos, podr\u00e1s comenzar a explorar otros mundos como: - Desarrollo de aplicaciones web - Internet of Things - An\u00e1lisis de datos (Data Science, Machine Learning, Big Data,...) - Scripting - Aplicaciones embebidas - Desarrollo de aplicaciones de escritorio</p> <p>Podr\u00e1s profundizar en cada una de estas ramas a partir de los conocimientos de los que dispones. En funci\u00f3n del camino que elijas, podr\u00e1s aprender frameworks como Django, Flask, Numpy, PyTorch, PANDAS, TensorFlow, Libmraa, ...</p> <p>A continuaci\u00f3n te listo algunos de los recursos a los que sin duda alguna merecen la pena darles un vistazo: - Tutoriales de Data Camp - Head First Python - Python Crash Course - Learn Python 3 the Hard Way - Python for Data Analysis - Google's Python Class - Curso \"Introduction to Python\", de Udacity</p> <p>Recuerda,  lo \u00fanico que necesitas saber es que t\u00fa puedes aprender cualquier cosa.</p>"}]}