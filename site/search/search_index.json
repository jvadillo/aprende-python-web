{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aprende Python desde cero a experto :rocket:","text":"<p>  </p> <p>Descargar libro aqu\u00ed</p> <p>Este es un libro grauito para aprender Python desde cero, pensado tanto para gente sin ninguna experiencia como para aquellos que ya dominan otros lenguajes de programaci\u00f3n. Ha sido escrito para aprender Python de forma \u00e1gil y eficiente, centr\u00e1ndose en los aspectos m\u00e1s \u00fatiles del lenguaje (sin perder el tiempo es cosas que nunca utilizar\u00e1s). Mediante peque\u00f1as pr\u00e1cticas y ejemplos ir\u00e1s aprendiendo los fundamentos b\u00e1sicos de Python hasta llegar a ser un experto en el lenguaje.</p>  <p>Descargar libro aqu\u00ed</p>"},{"location":"#conocimientos-previos","title":"Conocimientos previos","text":"<p>El curso no requiere conocimientos previos de ning\u00fan tipo ni experiencia en programaci\u00f3n, pero en caso de tenerla podr\u00e1s fortalecer los conocimientos que tienen en com\u00fan los distintos lenguajes de programaci\u00f3n y avanzar m\u00e1s r\u00e1pido. No te preocupes si es la primera vez que te enfrentas a la programaci\u00f3n, el libro est\u00e1 pensado para acompa\u00f1arte paso a paso y de forma \u00e1gil, sin perder el tiempo aprendiendo aspectos irrelevantes del lenguaje.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>El curso comenzar\u00e1 tratando los fundamentos m\u00e1s b\u00e1sicos de Python, adentr\u00e1ndose paso a paso en aspectos m\u00e1s complejos y fascinantes del lenguaje. A continuaci\u00f3n tienes el \u00edndice de contenidos, pero te aviso de que el material est\u00e1 en constante mejora y evoluci\u00f3n.</p> <ol> <li>Introducci\u00f3n </li> <li>Variables y Tipos de datos </li> <li>Operadores y expresiones</li> <li>Estructuras de control</li> <li>Listas y Tuplas</li> <li>Diccionarios</li> <li>Funciones</li> <li>Excepciones</li> <li>Clases y Objetos</li> <li>Herencia</li> <li>M\u00f3dulos y Paquetes</li> <li>Pr\u00f3ximos pasos</li> </ol>"},{"location":"#contribuir","title":"Contribuir","text":"<p>Toda contribuci\u00f3n es m\u00e1s que bienvenida. Puedes contribuir con este libro de las siguientes: - Ayuda a mejorar el material notificando errores, planteando mejoras o incluso nuevos ejercicios pr\u00e1cticos. Puedes hacerlo respondiendo a este issue directamente o envi\u00e1ndome un mensaje en Twitter (@JonVadillo). - Comparte y recomienda este libro o el repositorio en las redes sociales. - Recuerda que puedes adquirir este libro por el precio que consideres (\u00a1desde cero euros!)</p>"},{"location":"#licencia","title":"Licencia","text":"<p>Este libro esta licenciado como Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License aunque no necesariamente las im\u00e1genes de su interior.</p> <p>El c\u00f3digo que contiene este repositorio se encuenta bajo la licencia GNU GPL-3.0</p>"},{"location":"01-introduccion/","title":"Introducci\u00f3n","text":"<p>Python es sin duda alguna uno de los lenguajes de programaci\u00f3n m\u00e1s populares que existen hoy en d\u00eda. En comparaci\u00f3n con otros lenguajes de programaci\u00f3n, Python presume de tener una curva de aprendizaje peque\u00f1a y un gran potencial, ya que hablamos de un lenguaje con el que es posible realizar tareas de todo tipo, como por ejemplo:</p> <ul> <li>Desarrollo de aplicaciones web</li> <li>Inteligencia artificial</li> <li>Automatizaci\u00f3n de tareas</li> <li>An\u00e1lisis avanzado de datos</li> </ul> <p>En este libro aprender\u00e1s los fundamentos b\u00e1sicos del lenguaje de forma que al terminar su lectura cuentes con una s\u00f3lida base sobre la que seguir tu carrera como programador.</p>"},{"location":"01-introduccion/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<p>Se trata de un lenguaje open source en el que destaca su legibilidad. El c\u00f3digo es limpio y ordenado, lo cual convierte a Python en un lenguaje c\u00f3modo de leer y escribir. En definitiva: un lenguaje de programaci\u00f3n f\u00e1cil de entender y aprender. </p> <p>Al contrario que otros lenguajes de programaci\u00f3n como C o Java, Python es un lenguaje interpretado, lo que significa que no es necesario compilar el c\u00f3digo de Python antes de ejecutarlo. El int\u00e9rprete ir\u00e1 analizando y ejecutando el c\u00f3digo l\u00ednea por l\u00ednea. </p> <p>Otra de las principales caracter\u00edsticas de Python es que es que es un lenguaje de programaci\u00f3n din\u00e1micamente tipado, es decir, el programador no tiene que declarar el tipo de las variables si no que este se deduce autom\u00e1ticamente en el tiempo de ejecuci\u00f3n.</p> <pre><code># La variable \"edad\" guarda el valor como integer\nedad = 25\nprint(\"La variable 'edad' es de tipo: \" + str(type(edad)))\n# Ahora \"edad\" guarda un string\nedad = \"Tengo 25 a\u00f1os\"\nprint(\"La variable 'edad' es de tipo: \" + str(type(edad)))\n</code></pre> <p>Por \u00faltimo, comentar que una de las mayores ventajas de este lenguaje de programaci\u00f3n orientado a objetos es la extensa variedad de liber\u00edas y frameworks disponibles para cualquier prop\u00f3sito, lo cual hace que Python sea la opci\u00f3n perfecta para el desarrollo de aplicaciones de cualquier tipo.</p>"},{"location":"01-introduccion/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>Python es un lenguaje multiplataforma, lo que significa que podemos trabajar con Python tanto en Windows, Mac o Linux. A pesar de que todav\u00eda encontrar\u00e1s c\u00f3digo escrito en Python 2, en la actualidad la versi\u00f3n recomendada es Python 3. A continuaci\u00f3n podr\u00e1s ver c\u00f3mo instalar Python en cada uno de los entornos.</p>"},{"location":"01-introduccion/#instalar-python-en-windows","title":"Instalar Python en Windows","text":"<p>Sigue los siguientes pasos para instalar Python en Windows:</p> <ol> <li>Descarga la \u00faltima versi\u00f3n de Python para Windows desde la p\u00e1gina web oficial: https://www.python.org/downloads/windows/</li> <li>En funci\u00f3n de la versi\u00f3n de tu sistema operativo (32 btis o 64 bits), tendr\u00e1s que escoger entre una de las dos versiones: Windows x86 executable installer o Windows x86-64 executable installer.</li> <li>Una vez descargado, ejecuta el instalador marcando las casillas \"Add Python 3.6 to PATH\" y \"Add Python to your environment variables\".</li> </ol>"},{"location":"01-introduccion/#instalar-python-en-ubuntu","title":"Instalar Python en Ubuntu","text":"<p>En primer lugar comprueba que Python no est\u00e9 instalado en el sistema mediante el siguiente comando: <pre><code>$ python3 --version\nPython 3.6.1\n</code></pre> En caso de no estar instalado, basta con ejecutar el siguiente comando en la consola: <pre><code>$ sudo apt install python3\n</code></pre></p>"},{"location":"01-introduccion/#instalar-python-en-mac","title":"Instalar Python en Mac","text":"<p>La instalaci\u00f3n para Mac es sencilla y directa. Simplemente descarga la \u00faltima versi\u00f3n de Python desde la p\u00e1gina web oficial y ejecuta el archivo .pkg descargado.</p>"},{"location":"01-introduccion/#entorno-de-desarrollo","title":"Entorno de desarrollo","text":""},{"location":"01-introduccion/#editores-de-codigo","title":"Editores de c\u00f3digo","text":"<p>Para programar en Python es suficiente con tener un editor de texto cualquiera, aunque hoy en d\u00eda es recomendable utilizar un editor avanzado o un IDE que permita programar de forma \u00e1gil. </p> <p>Estas son algunas de las opciones m\u00e1s recomendadas:</p>"},{"location":"01-introduccion/#editores-de-texto","title":"Editores de texto","text":"<ul> <li>Atom: https://atom.io/ </li> <li>Sublime Text: https://www.sublimetext.com/3</li> <li>Visual Studio Code: https://code.visualstudio.com/ </li> </ul>"},{"location":"01-introduccion/#ides","title":"IDEs","text":"<ul> <li>PyCharm: https://www.jetbrains.com/pycharm/ </li> <li>Eclipse (con el plug-in Pydev): https://www.eclipse.org/;[https://www.pydev.org/] (https://www.pydev.org/)</li> </ul>"},{"location":"01-introduccion/#entorno-de-desarrollo-avanzado","title":"Entorno de desarrollo avanzado","text":"<p>M\u00e1s adelante, una vez conozcas los fundamentos del lenguaje y tengas fluidez a la hora de programar, te recomendamos profundizar en los conocidos como \"entornos Virtuales\". Los entornos virtuales permiten configurar tu entorno de desarrollo de forma m\u00e1s avanzada, creando ambientes (entornos) aislados que permitan trabajar con distintas versiones de frameworks y librer\u00edas. Mientras tanto, te recomiendo que contin\u00faes paso a paso y en orden por el resto de lecciones.</p>"},{"location":"01-introduccion/#tu-primer-programa-hola-mundo","title":"Tu primer programa: \u00a1Hola Mundo!","text":"<p>Ya tenemos Python instalado en nuestro sistema operativo, por lo que estamos preparados para comenzar a escribir y ejecutar c\u00f3digo Python. Veremos c\u00f3mo ejecutar c\u00f3digo Python desde la consola directamente o desde un archivo de extensi\u00f3n <code>.py</code> </p>"},{"location":"01-introduccion/#consola-de-python","title":"Consola de Python","text":"<p>La consola de Python nos permite ejecutar c\u00f3digo escrito en Python directamente, sin tener que escribir el c\u00f3digo previamente en ning\u00fan fichero. Para entrar en la consola de Python, abre una consola (tambi\u00e9n conocidda como terminal o shell) del sistema operativo en el que te encuentres y escribe <code>py</code> o <code>python</code>. Esto nos mostrar\u00e1 la versi\u00f3n de Python instalada y dar\u00e1 comienzo a la consola de Python:</p> <pre><code>    python\n    Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    &gt;&gt;&gt;\n</code></pre> <p>Ver\u00e1s c\u00f3mo el cursor cambia y ahora aparece el s\u00edmbolo <code>&gt;&gt;&gt;</code>. A partir de ahora ya podemos ir ejecutando las instrucciones que queramos. En este caso escribiremos nuestro primer programa, el ya por todos conocido \u00a1Hola Mundo!:</p> <pre><code>    &gt;&gt;&gt; print(\"\u00a1Hola Mundo!\")\n    \u00a1Hola Mundo!\n</code></pre> <p>Tambi\u00e9n puedes ejecutar otras instrucciones. Prueba a ejecutar la siguiente operaci\u00f3n:</p> <pre><code>    &gt;&gt;&gt; 3*3\n    9\n</code></pre> <p>Para salir de la consola de Python, escribe <code>exit()</code> o pulsa <code>CTRL + Z</code> y <code>ENTER</code>.</p>"},{"location":"01-introduccion/#ejecutar-fichero","title":"Ejecutar fichero","text":"<p>Tambi\u00e9n podemos escribir nuestro c\u00f3digo en un fichero con extensi\u00f3n <code>.py</code> y ejecutarlo. Abre un editor de texto y crea un fichero llamado <code>holamundo.py</code> con el siguiente contenido:</p> <pre><code>    print(\"\u00a1Hola Mundo!\")\n</code></pre> <p>Para ejecutar el archivo, abre una consola de comandos en la misma ubicaci\u00f3n donde has guardado el archivo y escribe <code>python</code>seguido del nombre del fichero:</p> <pre><code>python holamundo.py\n</code></pre> <p>\u00a1Enhorabuena! Ya has escrito y ejecutado tu primer programa en Python.</p>"},{"location":"01-introduccion/#sintaxis","title":"Sintaxis","text":""},{"location":"01-introduccion/#indentacion","title":"Indentaci\u00f3n","text":"<p>Un aspecto muy importante a mencionar antes de comenzar a programar en Python es el hecho de que Python utiliza la indentaci\u00f3n (tambi\u00e9n conocida como sangr\u00eda, tabulaci\u00f3n o espaciado) para delimitar los bloques de c\u00f3digo. La indentaci\u00f3n est\u00e1ndar de Python requiere una tabulaci\u00f3n de 4 espacios:</p> <pre><code>x = 5\nif x == 5:\n    # tabulaci\u00f3n de 4 espacios\n    print(\"El valor de x es 5.\")\n</code></pre> <p>En caso contrario, al ejecutar nuestro c\u00f3digo recibiremos un error como el siguiente</p> <pre><code>    IndentationError: unindent does not match any outer indentation level\n</code></pre>"},{"location":"01-introduccion/#comentarios","title":"Comentarios","text":"<p>A la hora de programar es posible que queramos introducir en el c\u00f3digo comentarios que a\u00f1adan informaci\u00f3n extra sin afectar a la ejecuci\u00f3n del programa. En Python los comentarios se insertan mediante el car\u00e1cter hash (<code>#</code>):</p> <pre><code>    # Mi primer comentario\n    x = 5 # Un comentario junto con el c\u00f3digo\n</code></pre>"},{"location":"01-introduccion/#funcionamiento-de-python","title":"Funcionamiento de Python","text":"<p>Python ejecuta nuestro c\u00f3digo l\u00ednea por l\u00ednea. Por cada l\u00ednea de c\u00f3digo estas son las acciones que se realizan: </p> <ol> <li>Analizar (parse en ingl\u00e9s) el c\u00f3digo comprobando que formato y la sintaxis es correcta, es decir, que cumplen las normas establecidas para el lenguaje de progamaci\u00f3n.</li> <li>Traducir el c\u00f3digo a bytecode (instrucciones que nuestra m\u00e1quina puede ejecutar).</li> <li>Enviar el c\u00f3digo para su ejecuci\u00f3n a la Python Virtual Machine(PVM), donde el c\u00f3digo es ejecutado.</li> </ol>"},{"location":"02-Tipos-de-datos-y-Variables/","title":"Variables y Tipos de datos","text":"<p>Las variables permiten almacenar datos del programa. Estas ser\u00e1n de un tipo u otro en funci\u00f3n de la informaci\u00f3n que se guarde en ellas.</p> <p><pre><code>nombre = 'Amaia' # cadena de texto\nedad = 30 # n\u00famero entero\n</code></pre> El nombre de una variable se conoce como identificador, y deber\u00e1 cumplir las siguientes reglas:</p> <ul> <li>Comenzar con una letra o un gui\u00f3n bajo.</li> <li>El resto del nombre estar\u00e1 formado por letras, n\u00fameros o guiones bajos.</li> <li>Los nombres de las variables son case sensitive, es decir, no es lo mismo que una variable se llame <code>resultado</code> que <code>RESULTADO</code>.</li> <li>Existen una serie de palabras reservadas que no se pueden utilizar (def, global, return, if, for, ...).</li> </ul> <p>Algunas de las recomendaciones respecto a los nombres de las variables est\u00e1n recogidas en la Gu\u00eda oficial de Estilos PEP8 de Python. Entre las m\u00e1s habituales encontramos las siguientes:</p> <ul> <li>Utilizar nombres descriptivos, en min\u00fasculas y separados por guiones bajos si fuese necesario: <code>resultado</code>, <code>mi_variable</code>, <code>valor_anterior</code>,...</li> <li>Escribir las constantes en may\u00fasculas: <code>MI_CONSTANTE</code>, <code>NUMERO_PI</code>, ...</li> <li>Antes y despu\u00e9s del signo <code>=</code>, debe haber uno (y solo un) espacio en blanco.</li> </ul> <p>Nota: No olvides que lo que la gu\u00eda plantea son recomendaciones y no obligaciones. Por ejemplo, mientras PEP8 recomienda tabular el c\u00f3digo con 4 espacioes en blanco, la gu\u00eda particular de los desarrolladores de Google habla de 2 espacios en lugar de 4.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#resumen-de-tipos-de-variables","title":"Resumen de tipos de variables","text":"<pre><code>    edad = 24 # n\u00famero entero (integer)\n    precio = 112.9 # n\u00famero de punto flotante (float)\n    titulo = \u2018Aprende Python desde cero\u2019 # cadena de texto (string)\n    test = True # booleano\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#lectura-de-datos-en-python","title":"Lectura de datos en Python","text":"<p>La funci\u00f3n <code>input()</code> permite introducir datos al usuario:</p> <pre><code>&gt;&gt;&gt; nombre = input()\nLeire\n&gt;&gt;&gt; print(nombre)\nLeire\n</code></pre> <p>Como se puede ver en el siguiente ejemplo, es posible tambi\u00e9n mostrar un mensaje al usuario, tal y como muestra el siguiente ejemplo.</p> <pre><code>&gt;&gt;&gt; nombre = input(\"Escribe tu nombre: \")\nEscribe tu nombre: Leire\n&gt;&gt;&gt; print(nombre)\nLeire\n ```\n\n## N\u00fameros\nPython soporta dos tipos de n\u00fameros: enteros (integer) y de punto flotante (float).\n\n ```python\n# integer\nx = 5\nprint(x)\n\n# float\ny = 5.0\nprint(y)\n\n# Otra forma de declarar un float\nz = float(5)\nprint(z)\n</code></pre> <p>Si tenemos dudas del valor de una variable, podemos mostrar su tipo utilizando la funci\u00f3n <code>type()</code>:</p> <pre><code>&gt;&gt;&gt; x = 5.5\n&gt;&gt;&gt; type(x)\n&lt;class 'float'&gt;\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#cadenas-de-texto-string","title":"Cadenas de texto (string)","text":"<p>Las cadenas de texto o strings se definen mediante comilla simple (<code>' '</code>) o doble comilla (<code>\" \"</code>):</p> <pre><code>mi_nombre = 'Ane'\nprint(mi_nombre)\nmi_nombre= \"Ane\"\nprint(mi_nombre)\n</code></pre> <p>La diferencia principal se encuentra en que las comillas dobles aportan mayor facilidad en textos que incluyan ap\u00f3strofes:</p> <pre><code>mi_nombre = 'I\\'m John'\nprint(mi_nombre)\nmi_nombre= \"I'm John\"\nprint(mi_nombre)\n</code></pre> <p>M\u00e1s informaci\u00f3n sobre strings y car\u00e1cteres especiales en:  https://docs.python.org/3/tutorial/introduction.html#strings</p> <p>Para definir strings multi-l\u00ednea se utiliza la triples comillas (<code>\"\"\"</code>):</p> <pre><code>frase = \"\"\" esto es una\n        frase muy larga de m\u00e1s de\n        una l\u00ednea ...\"\"\"\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#concatenacion-de-strings","title":"Concatenaci\u00f3n de strings","text":"<p>Es posible unir dos strings con el operador <code>+</code>:</p> <pre><code>&gt;&gt;&gt; primera_palabra = 'Hola'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', mundo'\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n\n&gt;&gt;&gt; segunda_palabra = 'mundo'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', ' + segunda_palabra\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n</code></pre> <p>M\u00e9todo alternativo 1: str.join(): El m\u00e9todo <code>join()</code> recibe como argumento el listado (de tipo List, Tuple, String, Dictionary y Set) de strings que se desean concatenar. Se invoca sobre el separador que se utilizar\u00e1 para unir las cadenas (el cual a su vez es un string tambi\u00e9n):</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; separador = ' - '\n&gt;&gt;&gt; separador.join(strings)\n'do - re - mi'\n</code></pre> <p>Para iterar un elemento detr\u00e1s del otro se introducir\u00e1 string vac\u00edo como separador:</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; ''.join(strings)\n'doremi'\n</code></pre> <p>M\u00e9todo alternativo 2: <code>str.format()</code>: Python 3 introdujo una nueva forma para formatear strings, la cual sustituye a la anterior en la que se hace uso del operador <code>%</code>. Para ello se invoca el m\u00e9todo <code>format()</code> de un string:</p> <pre><code># Ordenado por defecto:\nfrase = \"Meses: {}, {} y {}\".format('Enero','Febrero','Marzo')\nprint(frase)\n\n# Especificar el orden indicando la posici\u00f3n:\nfrase = \"Meses: {1}, {0} y {2}\".format('Enero','Febrero','Marzo')\nprint(frase)\n\n# Especificar el orden mediante parejas clave-valor:\nfrase = \"Meses: {ene}, {feb} y {mar}\".format(ene='Enero', feb='Febrero',m='Marzo')\nprint(frase)\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#cadenas-f-f-strings","title":"Cadenas 'f' (f-strings)","text":"<p>La versi\u00f3n 3.6 de Python trajo un gran avance a la hora de integrar variables o expreiones en cadenas de car\u00e1cteres. Se introdujeron las llamadas <code>f-strings</code>, una forma m\u00e1s c\u00f3moda y directa para insertar variables y expresiones en cadenas. Permiten introducir cualquier variable o expresi\u00f3n dentro de un string incluyendo la variable entre llaves <code>{</code> y <code>}</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>nombre = \"Nora\"\nedad = 22\nsaludo = f\"Me llamo {nombre} y tengo {edad} a\u00f1os.\"\n</code></pre> <p>Para indicar que se trata de un <code>f-string</code>, este deber\u00e1 incluir la letra 'f' antes del comiendo de la cadena (antes de las comillas). A continuaci\u00f3n se muestra otro ejemplo en el que se introduce una expresi\u00f3n:</p> <pre><code>a = 4\nb = 3\nprint(f\"La multiplicaci\u00f3n de {a} y {b} es igual a {a * b}\")\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>A la hora de concatenar un string con otras variables como <code>integer</code> o <code>float</code> puede haber problemas:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + edad + \" a\u00f1os y mi nota media es \" + nota_media + \".\")\n\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>Mediante la funci\u00f3n <code>str()</code> podemos convertir un valor a string y evitar as\u00ed cualquier tipo de problema:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + str(edad) + \" a\u00f1os y mi nota media es \" + str(nota_media) + \".\")\nTengo 25 a\u00f1os y mi nota media es 7.3.\n</code></pre> <p>De igual manera es posible convertir a otros tipos con las funciones <code>int()</code>, <code>float()</code> and <code>bool()</code>.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#metodos-en-cadenas-de-texto-string","title":"M\u00e9todos en cadenas de texto (string)","text":"<p>Es posible obtener un car\u00e1cter concreto de un string utilizando los corchetes <code>[]</code> y el \u00edndice del car\u00e1cter al que queremos acceder:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nfrase[0] # devuelve el primer caracter\nfrase[1] # devuelve el segundo caracter\nfrase[-1] # devuelve el primer caracter empezando por el final\nfrase[-2] # # devuelve el segundo caracter empezando por el final\n</code></pre> <p>Si queremos obtener un substring, utilizaremos la siguiente notaci\u00f3n:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nmi_substring = frase[1:5] \n# devuelver\u00e1 los caracteres desde la posici\u00f3n 1 hasta la 5 (no incluye el 5)\n</code></pre> <p>En caso de dejar la primera variable vac\u00eda, se considera la primera posici\u00f3n del string. Dejando la segunda variable vac\u00eda se considera la \u00faltima posici\u00f3n del string:</p> <pre><code>&gt;&gt;&gt; frase = 'Aprendiendo a programar en Python'\n&gt;&gt;&gt; mi_substring = frase[:5]\n&gt;&gt;&gt; mi_substring\n'Apren'\n&gt;&gt;&gt; mi_substring = frase[4:]\n&gt;&gt;&gt; mi_substring\n'ndiendo a programar en Python'\n</code></pre> <p>Otros m\u00e9todos \u00fatiles de string:</p> <pre><code>len(str) # devuelve la longitud del string\nstr.upper() # convierte a may\u00fasculas\nstr.lower() # convierte a min\u00fasculas\nstr.title() # convierte a may\u00fasculas la primera letra de cada palabra\nstr.count(substring [, inicio, fin]) # devuelve el n\u00famero de veces que aparece\n# el substring en el string. Opcionalmente se puede indicar el inicio y fin. \nstr.find(\u2018d\u2019) # devuelve el \u00edndice de la primera aparici\u00f3n de 'd'\n# (devolver\u00e1 -1 si no lo encuentra)\nsubstr in str # devuelve True si el string contiene el substring\nstr.replace(old, new [, count]) # reemplaza 'old' por 'new' un m\u00e1ximo de 'count' veces.\nstr.isnumeric() # devuelve True si str contiene solamente n\u00fameros\n</code></pre>"},{"location":"02-Tipos-de-datos-y-Variables/#coding-time","title":"Coding time!","text":""},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa que contenga las siguientes variables:</p> <ul> <li><code>nombre</code>: tipo string y valor \"Michael Jordan\"</li> <li><code>edad</code>: tipo integer y valor 50</li> <li><code>media_puntos</code>: tipo float y valor 28.5</li> <li><code>activo</code>: False</li> </ul> <p>El programa deber\u00e1 mostrar en pantalla todos los valores.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que solicite el nombre, DNI y edad, lo almacene en 3 variables distintas y muestre por pantalla los valores introducidos.</p>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que genere un string compuesto por los primeros 3 caracteres y los \u00faltimos 3 caracteres de un string introducido por el usuario. Pista: tendr\u00e1s que utilizar la funci\u00f3n <code>len()</code> en la obtenci\u00f3n de los \u00faltimos 3 caracteres.</p> <ul> <li>Ejemplo 1: 'aprendiendo'  </li> <li>Resultado 1: 'aprndo'  </li> <li>Ejemplo 2: 'escribiendo c\u00f3digo'  </li> <li>Resultado 2: 'escigo' </li> </ul>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que solicite al usuario dos n\u00fameros y una frase. El primer n\u00famero introducido se corresponder\u00e1 a la posici\u00f3n de inicio del substring que deber\u00e1 mostrar el programa por pantalla. El segundo n\u00famero indicar\u00e1 la longitud de dicho substring.</p> <ul> <li>Ejemplo 1: Posicion=4, Longitud=8, Frase='Desarrollar es mi nueva afici\u00f3n'  </li> <li>Resultado 1: \"rrollar \"  </li> <li>Ejemplo 2: Posicion=8, Longitud=11, Frase='Bienvenido a la clase de programaci\u00f3n'</li> <li>Resultado 2: \"do a la cla\"</li> </ul>"},{"location":"02-Tipos-de-datos-y-Variables/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribe un programa que solicite al usuario una frase. A continuaci\u00f3n le solicitar\u00e1 la letra que quiere reemplazar y por qu\u00e9 letra deber\u00e1 reemplazarse. Por \u00faltimo el programa mostrar\u00e1 el n\u00famero de veces que la letra est\u00e1 presente en la frase y el resultado final tras reemplazarla.</p> <ul> <li>Ejemplo: 'Desarrollar es mi nuevo pasatiempos', 'a','e'</li> <li>Resultado: 4 apariciones. 'Deserroller es mi nueve pesetiempos'  </li> </ul>"}]}